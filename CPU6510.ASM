;****************************************
;*					*
;* Titel: CPU 6510 Emulation		*
;* Autor: Thorsten Kattanek		*
;* Datum: 1.7.1998			*
;* Ort  : Berlin			*
;* Vers : 2.0				*
;* Info : Komplette CPU Emulation	*
;*					*
;*					*
;****************************************

EXTRN	C64_RAM,C64_ROM,TASTATUR:NEAR
EXTRN	C64_TASTEN_1:BYTE,C64_TASTEN_2:BYTE,V_MODUS_C64:BYTE,FARBEN_C64:BYTE
EXTRN   SET_FARBEN:NEAR,TIMER_A_LATCH:WORD,TIMER_A_LATCH_LO:BYTE,TIMER_A_LATCH_HI:BYTE
EXTRN	VIC_6569:NEAR,RASTER_LATCH_HI:BYTE,RASTER_LATCH_LO:BYTE,LP:BYTE,L015:NEAR,CIA1_REG_READ:NEAR,CIA1_REG_WRITE:NEAR
EXTRN	CIA2_REG_READ:NEAR,CIA2_REG_WRITE:NEAR,SID:NEAR,CONFIG:BYTE

PUBLIC	CPU_6510,ZYKLEN,PC,SR,AC,XR,YR,CSP,I_FLAGS,READ_BYTE,READ_WORD,ABSTURZ_TST,ILLEGAL_OPC,LOST_10,HALT,HALT_OK
.MODEL SMALL
.DATA




;****************************************

;*** Vorerst  geänderte Illegale Befehle ***

;***************************** C64 Prozessor Register ***********************************
		
	PC		DW	0FCE2H		; Programm Counter
	SR		DB	00000100B	; Statusregister (N-V-/-B-D-I-Z-C)
	AC		DB	0		; Accumulator
	XR		DB	0		; X-Register
	YR		DB	0		; Y-Register
	CSP		DB	0		; Stackpointer
	
	I_FLAGS		DB	0		; Hier wird dem Prozessor mitgeteilt ob ein Interrupt ausgelöst wurde
						; z.B. dur den VIC oder Timer Bit 0= NMI Bit 1= IRQ
	
	
	CPU_TABELLE	DW OP00,OP01,OP02,OP03,OP04,OP05,OP06,OP07,OP08,OP09,OP0A,OP0B,OP0C,OP0D,OP0E,OP0F
			DW OP10,OP11,OP12,OP13,OP14,OP15,OP16,OP17,OP18,OP19,OP1A,OP1B,OP1C,OP1D,OP1E,OP1F
			DW OP20,OP21,OP22,OP23,OP24,OP25,OP26,OP27,OP28,OP29,OP2A,OP2B,OP2C,OP2D,OP2E,OP2F
			DW OP30,OP31,OP32,OP33,OP34,OP35,OP36,OP37,OP38,OP39,OP3A,OP3B,OP3C,OP3D,OP3E,OP3F
			DW OP40,OP41,OP42,OP43,OP44,OP45,OP46,OP47,OP48,OP49,OP4A,OP4B,OP4C,OP4D,OP4E,OP4F
			DW OP50,OP51,OP52,OP53,OP54,OP55,OP56,OP57,OP58,OP59,OP5A,OP5B,OP5C,OP5D,OP5E,OP5F
			DW OP60,OP61,OP62,OP63,OP64,OP65,OP66,OP67,OP68,OP69,OP6A,OP6B,OP6C,OP6D,OP6E,OP6F
			DW OP70,OP71,OP72,OP73,OP74,OP75,OP76,OP77,OP78,OP79,OP7A,OP7B,OP7C,OP7D,OP7E,OP7F
			DW OP80,OP81,OP82,OP83,OP84,OP85,OP86,OP87,OP88,OP89,OP8A,OP8B,OP8C,OP8D,OP8E,OP8F
			DW OP90,OP91,OP92,OP93,OP94,OP95,OP96,OP97,OP98,OP99,OP9A,OP9B,OP9C,OP9D,OP9E,OP9F
			DW OPA0,OPA1,OPA2,OPA3,OPA4,OPA5,OPA6,OPA7,OPA8,OPA9,OPAA,OPAB,OPAC,OPAD,OPAE,OPAF
			DW OPB0,OPB1,OPB2,OPB3,OPB4,OPB5,OPB6,OPB7,OPB8,OPB9,OPBA,OPBB,OPBC,OPBD,OPBE,OPBF
			DW OPC0,OPC1,OPC2,OPC3,OPC4,OPC5,OPC6,OPC7,OPC8,OPC9,OPCA,OPCB,OPCC,OPCD,OPCE,OPCF
			DW OPD0,OPD1,OPD2,OPD3,OPD4,OPD5,OPD6,OPD7,OPD8,OPD9,OPDA,OPDB,OPDC,OPDD,OPDE,OPDF
			DW OPE0,OPE1,OPE2,OPE3,OPE4,OPE5,OPE6,OPE7,OPE8,OPE9,OPEA,OPEB,OPEC,OPED,OPEE,OPEF
			DW OPF0,OPF1,OPF2,OPF3,OPF4,OPF5,OPF6,OPF7,OPF8,OPF9,OPFA,OPFB,OPFC,OPFD,OPFE,OPFF	
		
	ZYKLEN		DB	0
	ABSTURZ_TST	DB 	0
	ILLEGAL_OPC	DB	0
	HALT		DW	49152
	HALT_OK		DB	1
	LOST_10		DW	10 DUP(0)
	
;****************************************

.486
.CODE




;******************************** arbeitet einen CPU Befehl ab 100 % ********************

CPU_6510:
	MOV	AH,I_FLAGS
	AND	AH,AH
	JNZ	INTERRUPT
	
	MOV	DI,PC
	
	CMP	HALT_OK,0
	JE	CPU_6510_20
	
	CMP	DI,HALT
	JE 	DEBUG
CPU_6510_20:
	XOR	SI,SI
CPU_6510_10:
	MOV	AX,LOST_10[SI+2]
	MOV	LOST_10[SI],AX
	INC	SI
	INC	SI
	CMP	SI,18
	JNE	CPU_6510_10
	MOV	LOST_10[18],DI
	
	INC	PC
	CALL 	READ_BYTE			; CPU Befehl einlesen
	XOR	AH,AH
	ROL	AX,1
	MOV	SI,AX
	MOV	BX,CPU_TABELLE[SI]
	CALL	BX
	RET
DEBUG:
	CMP	ABSTURZ_TST,2
	JNE	DEBUG_10
	MOV	ABSTURZ_TST,0
	JMP	CPU_6510_20
DEBUG_10:
	MOV	ABSTURZ_TST,2
	RET

;**** Holt ein Byte aus dem C64 Speicher unter berücksichtigung des Protessor Ports *****
	
READ_BYTE:					; Prossersor Port berücksichtigen !!
	
	CMP	DI,0A000H
	JL	READ_BYTE_00			; Springe wenn kleiner
	CMP	DI,0BFFFH
	JLE	READ_BYTE_01			; Springe wenn kleiner gleich ( Di im Bereich A000-BFFF )
	CMP	DI,0D000H	
	JL	READ_BYTE_00			; Springe wenn kleiner
	CMP	DI,0DFFFH
	JLE	READ_BYTE_05			; Springe wenn kleiner gleich ( Di im Bereich D000-DFFF )
	CMP	DI,0E000H
	JL	READ_BYTE_00			; Springe wenn kleiner
	CMP	DI,0FFFFH
	JLE	READ_BYTE_03			; Springe wenn kleiner gleich ( Di im Bereich E000-FFFF )
		
READ_BYTE_00:

	MOV	ES,C64_RAM	
	JMP	READ_BYTE_99
	
READ_BYTE_01:

	MOV	ES,C64_RAM
	MOV	AL,ES:1
	AND	AL,00000001B
	JZ	READ_BYTE_02			; Sprung wenn Bit 0 = 0
	MOV	ES,C64_ROM
	JMP	READ_BYTE_99
	
READ_BYTE_02:

	MOV	ES,C64_RAM
	JMP	READ_BYTE_99
	
READ_BYTE_03:

	MOV	ES,C64_RAM
	MOV	AL,ES:1
	AND	AL,00000010B
	JZ	READ_BYTE_04			; Sprung wenn Bit 1 = 0
	MOV	ES,C64_ROM
	JMP	READ_BYTE_99
	
READ_BYTE_04:

	MOV	ES,C64_RAM
	JMP	READ_BYTE_99	

READ_BYTE_05:

	MOV	ES,C64_RAM
	MOV	AL,ES:1
	AND	AL,00000100B
	JZ	READ_BYTE_06			; Sprung wenn Bit 2 = 0

	CMP	DI,0DCFFH			; Vergleich ob Adressbereich von CIA 1
	JNLE	TMP_10
	JMP	CIA1_REG_READ			; ****** ES HANDELT SICH UM EIN CIA1 REGISTER ******
TMP_10:	
	CMP	DI,0DDFFH
	JNLE	TMP_20	
	JMP	CIA2_REG_READ			; ****** ES HANDELT SICH UM EIN CIA2 REGISTER ******
TMP_20:
	JMP	READ_BYTE_99
	
READ_BYTE_06:

	MOV	ES,C64_ROM
	JMP	READ_BYTE_99	
	
READ_BYTE_99:
					
	MOVZX	AX,BYTE PTR ES:[DI]		; Liest 1 Byte aus dem C64 Speicher
	RET
	
;******************** Schreibt ein Byte in den C64 Speicher (RAM) ***********************
	
WRITE_BYTE:
	MOV	ES,C64_RAM
	MOV	ES:[DI],AL			; Schreibt 1 Byte in den C64 Speicher	

	CMP	DI,0D400H
	JL	TMP_25
	CMP	DI,0D400H+28
	JG	TMP_25	
	JMP	SID				; ****** ES HANDELT SICH UM EIN SID REGISTER *******		

TMP_25:
			
	CMP	DI,0DC00H
	JL	TMP_30
	CMP	DI,0DCFFH
	JG	TMP_30
	JMP	CIA1_REG_WRITE			; ****** ES HANDELT SICH UM EIN CIA1 REGISTER ******

TMP_30:

	CMP	DI,0DD00H
	JL	TMP_40
	CMP	DI,0DDFFH
	JG	TMP_40
	JMP	CIA2_REG_WRITE			; ****** ES HANDELT SICH UM EIN CIA2 REGISTER ******

TMP_40:

	CMP	DI,0D019H
	JNE	WRITE_BYTE_06
	XOR	ES:[DI],AL
	RET

WRITE_BYTE_06:
	CMP	DI,0D012H
	JNE	WRITE_BYTE_07
	MOV	RASTER_LATCH_LO,AL
	RET
WRITE_BYTE_07:
	CMP	DI,0D011H
	JNE	WRITE_BYTE_08
	AND	AL,10000000B
	ROL	AL,1
	MOV	RASTER_LATCH_HI,AL
WRITE_BYTE_08:
	CMP	CONFIG,1
	JNE	WRITE_BYTE_09
	MOV	AH,AL
	AND	AH,00001111B
	CMP	DI,0D020H
	JNE	WRITE_BYTE_09
	MOV	DX,03C0H
	MOV	AL,11H OR 11110000B
	OUT	DX,AL
	MOV	AL,AH
	OUT	DX,AL
WRITE_BYTE_09:
	RET

;**** List ein Word aus dem C64 Speicher unter berücksichtigung des Prozessor Ports *****

READ_WORD:					; Prossersor Port berücksichtigen !!
	
	CMP	DI,0A000H
	JL	READ_WORD_00			; Springe wenn kleiner
	CMP	DI,0BFFFH
	JLE	READ_WORD_01			; Springe wenn kleiner gleich ( Di im Bereich A000-BFFF )
	CMP	DI,0D000H	
	JL	READ_WORD_00			; Springe wenn kleiner
	CMP	DI,0DFFFH
	JLE	READ_WORD_05			; Springe wenn kleiner gleich ( Di im Bereich E000-FFFF )
	CMP	DI,0E000H
	JL	READ_WORD_00			; Springe wenn kleiner
	CMP	DI,0FFFFH
	JLE	READ_WORD_03			; Springe wenn kleiner gleich ( Di im Bereich D000-DFFF )
	
READ_WORD_00:

	MOV	ES,C64_RAM	
	JMP	READ_WORD_99
	
READ_WORD_01:

	MOV	ES,C64_RAM
	MOV	AL,ES:1
	AND	AL,00000001B
	JZ	READ_WORD_02			; Sprung wenn Bit 0 = 0
	MOV	ES,C64_ROM
	JMP	READ_WORD_99
	
READ_WORD_02:

	MOV	ES,C64_RAM
	JMP	READ_WORD_99
	
READ_WORD_03:

	MOV	ES,C64_RAM
	MOV	AL,ES:1
	AND	AL,00000010B
	JZ	READ_WORD_04			; Sprung wenn Bit 1 = 0
	MOV	ES,C64_ROM
	JMP	READ_WORD_99
	
READ_WORD_04:

	MOV	ES,C64_RAM
	JMP	READ_WORD_99	

READ_WORD_05:

	MOV	ES,C64_RAM
	MOV	AL,ES:1
	AND	AL,00000100B
	JZ	READ_WORD_06			; Sprung wenn Bit 2 = 0
	MOV	ES,C64_ROM
	JMP	READ_WORD_99
	
READ_WORD_06:

	MOV	ES,C64_RAM
	JMP	READ_WORD_99	
	
READ_WORD_99:
					
	MOV	AX,ES:0[DI]			; Liest 1 Word aus dem C64 Speicher
	RET
	
;******************** Schreibt ein Word in den C64 Speicher (RAM) ***********************
	
WRITE_WORD:
	MOV	ES,C64_RAM
	MOV	WORD PTR ES:[DI],AX		; Schreibt 1 Word in den C64 Speicher
	RET

;**** Hier springt der Prozessor hin wenn ein ungültiger CPU Befehl abgearbeitet werden soll ****

ABSTURZ:
	MOV	ABSTURZ_TST,1
	RET
	
;**** Hier wird aus dem Offset nach einem Branchbefehl der neue Point Counter gesetzt ****
	
BRANCH_JUMP:
	
	MOVZX	BX,AL
	AND	AL,10000000B
	JS	BRANCH_JUMP_1
	ADD	PC,BX
	RET
	
BRANCH_JUMP_1:	
	NEG	BL
	SUB	PC,BX
	RET

;************ Überträgt das PC Negativ und Zerro Flag ins C64 Statusregister ************

NZ_TRANSFER:
	AND	SR,01111101B
	POP	AX				; Negativflag übertragen
	MOV	BL,AL
	AND	BL,10000000B
	OR	SR,BL
	MOV	BL,AL				; Zerroflag übertragen
	AND	BL,01000000B
	ROL	BL,1
	ROL	BL,1
	ROL	BL,1
	OR	SR,BL
	RET
	
I_NZ_TRANSFER:
	PUSHF
	AND	SR,01111101B
	POP	AX				; Negativflag übertragen
	MOV	BL,AL
	AND	BL,10000000B
	OR	SR,BL
	MOV	BL,AL				; Zerroflag übertragen
	AND	BL,01000000B
	ROL	BL,1
	ROL	BL,1
	ROL	BL,1
	OR	SR,BL
	RET

;********* Überträgt das PC Negativ,Zerro und Carry Flag ins C64 Statusregister *********

NZC_TRANSFER:	
	AND     SR,01111100B
	POP	AX				; Negativflag übertragen
	MOV	BL,AL
	AND	BL,10000000B
	OR	SR,BL
	MOV	BL,AL				; Zerroflag übertragen
	AND	BL,01000000B
	ROL	BL,1
	ROL	BL,1
	ROL	BL,1
	OR	SR,BL
	MOV	BL,AL				; Carryflag übertragen
	AND	BL,00000001B
	OR	SR,BL
	RET
	
I_NZC_TRANSFER:
	PUSHF	
	AND     SR,01111100B
	POP	AX				; Negativflag übertragen
	MOV	BL,AL
	AND	BL,10000000B
	OR	SR,BL
	MOV	BL,AL				; Zerroflag übertragen
	AND	BL,01000000B
	ROL	BL,1
	ROL	BL,1
	ROL	BL,1
	OR	SR,BL
	MOV	BL,AL				; Carryflag übertragen
	AND	BL,00000001B
	OR	SR,BL
	RET
	
;******** Überträgt das PC Negativ,V,Zerro und Carry Flag ins C64 Statusregister ********
	
NVZC_TRANSFER:
	AND     SR,00111100B
	POP	AX				; Negativflag übertragen
	MOV	BL,AL
	AND	BL,10000000B
	OR	SR,BL
	MOV	BL,AH
	AND	BL,00001000B
	ROL	BL,1
	ROL	BL,1
	ROL	BL,1
	OR	SR,BL
	MOV	BL,AL				; Zerroflag übertragen
	AND	BL,01000000B
	ROL	BL,1
	ROL	BL,1
	ROL	BL,1
	OR	SR,BL
	MOV	BL,AL				; Carryflag übertragen
	AND	BL,00000001B
	OR	SR,BL
	RET
	
I_NVZC_TRANSFER:
	PUSHF
	AND     SR,00111100B
	POP	AX				; Negativflag übertragen
	MOV	BL,AL
	AND	BL,10000000B
	OR	SR,BL
	MOV	BL,AH
	AND	BL,00001000B
	ROL	BL,1
	ROL	BL,1
	ROL	BL,1
	OR	SR,BL
	MOV	BL,AL				; Zerroflag übertragen
	AND	BL,01000000B
	ROL	BL,1
	ROL	BL,1
	ROL	BL,1
	OR	SR,BL
	MOV	BL,AL				; Carryflag übertragen
	AND	BL,00000001B
	OR	SR,BL
	RET
	
;*************************** 6510 Prozessor Befehle (Opcodes) ***************************	

OP00:					; BRK
	MOV	ZYKLEN,6
	CALL	CS:VIC_6569
	OR	SR,00010000B		; Breakflag setzen		
	OR	I_FLAGS,00000010B	; und IRQ auslösen
	RET
OP01:					; ORA ($88,X)
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	OR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP02:					; (Illegal) JAM
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ
	JMP	ABSTURZ		
OP03:					; (Illegal) SLO ($88,X)
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ
	MOV	ZYKLEN,7
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	
	SHL	AL,1
	POP	DI
	
	CALL	I_NZC_TRANSFER
	CALL	WRITE_BYTE
	
	OR	AC,AL
	CALL	I_NZ_TRANSFER
	
	RET
OP04:					; (Illegal) NOP $88
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ
	MOV	ZYKLEN,2
	INC	PC
	RET
OP05:					; ORA $88	
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	OR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP06:					; ASL $88
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC		
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHL	AL,1
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZC_TRANSFER
OP07:					; ???
	JMP	ABSTURZ
OP08:					; PHP
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	AL,SR
	MOV	BL,CSP
	MOV	BH,01H
	MOV	DI,BX
	CALL	WRITE_BYTE
	DEC	CSP
	RET
OP09:					; ORA #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	OR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP0A:					; ASL
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	SHL	AC,1
	PUSHF
	JMP	NZC_TRANSFER
OP0B:					; (Illegal) ANC #$88
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	CALL	I_NZ_TRANSFER
	
	MOV	AL,AC
	ROL	AL,1
	AND	SR,11111110B
	AND	AL,00000001B
	OR	SR,AL
	RET
OP0C:					; (Illegal) NOP $4488
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ	
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	INC	PC
	INC	PC
	RET
OP0D:					; ORA $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	OR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP0E:					; ASL $4488
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569					
	MOV	DI,PC			
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHL	AL,1
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZC_TRANSFER
OP0F:					; ???
	JMP	ABSTURZ
OP10:					; BPL $4488
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,10000000B
	CMP	BL,10000000B
	JNE	OP10_1
	RET
OP10_1:
	JMP	BRANCH_JUMP
OP11:					; ORA ($88),Y
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	OR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER		
OP12:					; (Illegal) JAM
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ	
	JMP	ABSTURZ
OP13:					; ???
	JMP	ABSTURZ
OP14:					; ???
	JMP	ABSTURZ
OP15:					; ORA $88,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	XOR	AH,AH
	MOV	DI,AX
	CALL	READ_BYTE
	OR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP16:					; ASL $88,X
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	PUSH	AX
	MOV	DI,AX
	CALL	READ_BYTE
	SHL	AL,1
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZC_TRANSFER
OP17:					; ???
	JMP	ABSTURZ
OP18:					; CLC
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	AND	SR,11111110B
	RET
OP19:					; ORA $4488,Y
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	OR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP1A:					; ???
	JMP	ABSTURZ
OP1B:					; ???
	JMP	ABSTURZ
OP1C:					; ???
	JMP	ABSTURZ
OP1D:					; ORA $4488,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	OR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP1E:					; ASL $4488,X
	MOV	ZYKLEN,6
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHL	AL,1
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZC_TRANSFER
OP1F:					; ???
	JMP	ABSTURZ
OP20:					; JSR $4488
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	PUSH	AX			
	DEC	CSP
	MOV	BL,CSP
	MOV	BH,01H
	MOV	DI,BX
	MOV	AX,PC
	DEC	AX
	CALL	WRITE_WORD
	DEC	CSP
	POP	AX
	MOV	PC,AX
	RET
OP21:					; AND ($88,X)
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	JMP	NZ_TRANSFER	
OP22:					; ???
	JMP	ABSTURZ
OP23:					; ???
	JMP	ABSTURZ
OP24:					; BIT $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	PUSH	AX
	AND	SR,00111111B
	AND	AL,11000000B
	OR	SR,AL
	POP	AX
	AND	AH,AC
	PUSHF
	POP	AX
	AND	SR,11111101B
	AND	AL,00000010B
	OR	SR,AL
	RET
OP25:					; AND $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569		
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	JMP	NZ_TRANSFER	
OP26:					; ROL $88
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC		
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHL	AL,1
	POP	DI
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	OR	AL,BL
	CALL	WRITE_BYTE
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP27:					; ???
	JMP	ABSTURZ
OP28:					; PLP
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	INC	CSP
	MOV	BL,CSP
	MOV	BH,01H
	MOV	DI,BX
	CALL	READ_BYTE
	MOV	SR,AL
	RET
OP29:					; AND #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP2A:					; ROL
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569					
	MOV	AL,AC
	SHL	AL,1
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	OR	AL,BL
	MOV	AC,AL
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP2B:					; (Illegal) ANC #$88
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	CALL	I_NZ_TRANSFER
	
	MOV	AL,AC
	ROL	AL,1
	AND	SR,11111110B
	AND	AL,00000001B
	OR	SR,AL
	RET
OP2C:					; BIT $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	PUSH	AX
	AND	SR,00111111B
	AND	AL,11000000B
	OR	SR,AL
	POP	AX
	MOV	AH,AC
	AND	AH,AL
	PUSHF
	POP	AX
	AND	SR,11111101B
	AND	AL,00000010B
	OR	SR,AL
	RET
OP2D:					; AND $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP2E:					; ROL $4488
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569					
	MOV	DI,PC			
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHL	AL,1
	POP	DI
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	OR	AL,BL
	CALL	WRITE_BYTE
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP2F:					; ???
	JMP	ABSTURZ
OP30:					; BMI $4488
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,10000000B
	CMP	BL,10000000B
	JE	OP10_1
	RET
OP31:					; AND ($88),Y
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP32:					; (Illegal) JAM
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ
	JMP	ABSTURZ
OP33:					; ???
	JMP	ABSTURZ
OP34:					; ???
	JMP	ABSTURZ
OP35:					; AND $88,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	MOV	DI,AX
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP36:					; ROL $88,X
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	PUSH	AX
	MOV	DI,AX
	CALL	READ_BYTE
	SHL	AL,1
	POP	DI
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	OR	AL,BL
	CALL	WRITE_BYTE
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP37:					; ???
	JMP	ABSTURZ
OP38:					; SEC
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	AL,SR
	OR	AL,00000001B
	MOV	SR,AL
	RET
OP39:					; AND $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP3A:					; ???
	JMP	ABSTURZ
OP3B:					; ???
	JMP	ABSTURZ
OP3C:					; (Illegal) NOP $4488,X
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ	
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	INC	PC
	INC	PC
	RET
OP3D:					; AND $4488,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	AND	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP3E:					; ROL $4488,X
	MOV	ZYKLEN,6
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHL	AL,1
	POP	DI
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	OR	AL,BL
	CALL	WRITE_BYTE
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP3F:					; (Illegal) RLA $4488,X	
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ	
	MOV	ZYKLEN,6
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHL	AL,1
	POP	DI
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	OR	AL,BL
	CALL	WRITE_BYTE
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	
	PUSH	AX
	CALL	I_NZ_TRANSFER
	POP	AX
	AND	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP40:					; RTI
	INC	CSP
	MOV	BL,CSP
	MOV	BH,01H
	MOV	DI,BX
	CALL	READ_BYTE
	MOV	SR,AL
	AND 	SR,11101111B
	INC	CSP
	MOV	BL,CSP
	MOV	BH,01H
	MOV	DI,BX
	CALL	READ_WORD
	MOV	PC,AX
	INC	CSP
	RET
OP41:					; EOR ($88,X)
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	XOR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP42:					; ???
	JMP	ABSTURZ
OP43:					; ???
	JMP	ABSTURZ
OP44:					; ???
	JMP 	ABSTURZ
OP45:					; EOR $88
	MOV	ZYKLEN,2	
	CALL	CS:VIC_6569	
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	XOR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER	
OP46:					; LSR $88
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC		
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHR	AL,1
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZC_TRANSFER
OP47:					; (Illegal) SRE $88
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC		
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHR	AL,1
	POP	DI
	PUSH	AX
	PUSHF
	CALL	WRITE_BYTE
	POPF
	CALL	I_NZC_TRANSFER
	
	POP	AX
	XOR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER	
OP48:					; PHA
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	AL,AC
	MOV	BL,CSP
	MOV	BH,01H
	MOV	DI,BX
	CALL	WRITE_BYTE
	DEC	CSP
	RET	
OP49:					; EOR #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	XOR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER	
OP4A:					; LSR
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	SHR	AC,1
	PUSHF
	JMP	NZC_TRANSFER
OP4B:					; (Illegal) ASR #$88
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ	
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	
	AND	AC,AL
	CALL	I_NZ_TRANSFER
	
	SHR	AC,1
	PUSHF
	JMP	NZC_TRANSFER
OP4C:					; JMP $4488
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	PC,AX
	RET
OP4D:					; EOR $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	XOR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER	
OP4E:					; LSR $4488
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569			
	MOV	DI,PC			
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHR	AL,1
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZC_TRANSFER	
OP4F:					; ???
	JMP	ABSTURZ
OP50:					; BVC $4488
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,01000000B
	CMP	BL,01000000B
	JNE	OP10_1
	RET
OP51:					; EOR ($88),Y
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	XOR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER			
OP52:					; ???
	JMP	ABSTURZ
OP53:					; ???
	JMP	ABSTURZ
OP54:					; ???
	JMP	ABSTURZ
OP55:					; EOR $88,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	MOV	DI,AX
	CALL	READ_BYTE
	XOR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER
OP56:					; LSR $88,X
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	PUSH	AX
	MOV	DI,AX
	CALL	READ_BYTE
	SHR	AL,1
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZC_TRANSFER
OP57:					; ???
	JMP	ABSTURZ
OP58:					; CLI
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	AND	SR,11111011B
	RET
OP59:					; EOR $4488,Y
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	XOR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER				
OP5A:					; ???
	JMP	ABSTURZ
OP5B:					; ???
	JMP	ABSTURZ
OP5C:					; ???
	JMP	ABSTURZ
OP5D:					; EOR $4488,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	XOR	AC,AL
	PUSHF
	JMP	NZ_TRANSFER		
OP5E:					; LSR $4488,X
	MOV	ZYKLEN,6
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHR	AL,1
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZC_TRANSFER
OP5F:					; ???
	JMP	ABSTURZ
OP60:					; RTS
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	INC	CSP
	MOV	AL,CSP
	MOV	AH,01H
	MOV	DI,AX
	CALL	READ_WORD
	INC	AX
	MOV	PC,AX
	INC	CSP
	RET
OP61:					; ADC ($88,X)
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	ADC	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER	
OP62:					; ???
	JMP	ABSTURZ
OP63:					; ???
	JMP	ABSTURZ
OP64:					; ???
	JMP	ABSTURZ
OP65:					; ADC $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	ADC	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	;NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER
OP66:					; ROR $88
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC		
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHR	AL,1
	POP	DI
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	ROR	BL,1
	OR	AL,BL
	CALL	WRITE_BYTE
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP67:					; ???
	JMP	ABSTURZ
OP68:					; PLA
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	INC	CSP
	MOV	AL,CSP
	MOV	AH,01H
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	AC,AL
	AND	AL,AL	
	PUSHF		
	JMP	NZ_TRANSFER
OP69:					; ADC #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	ADC	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER
OP6A:					; ROR
	MOV	ZYKLEN,5	
	CALL	CS:VIC_6569				
	MOV	AL,AC
	SHR	AL,1
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	ROR	BL,1
	OR	AL,BL
	MOV	AC,AL
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP6B:					; ???
	JMP	ABSTURZ
OP6C:					; JMP ($4488)
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_WORD
	MOV	PC,AX
	RET	
OP6D:					; ADC $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	ADC	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER
OP6E:					; ROR $4488
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569					
	MOV	DI,PC			
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHR	AL,1
	POP	DI
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	OR	AL,BL
	CALL	WRITE_BYTE
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP6F:					; ???
	JMP	ABSTURZ
OP70:					; BVS $4488
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,01000000B
	CMP	BL,01000000B
	JE	OP10_1
	RET	
OP71:					; ADC ($88),Y
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	ADC	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER
OP72:					; ???
	JMP	ABSTURZ
OP73:					; ???
	JMP	ABSTURZ
OP74:					; ???
	JMP	ABSTURZ
OP75:					; ADC $88,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569			
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	ADC	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER
OP76:					; ROR $88,X
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	PUSH	AX
	MOV	DI,AX
	CALL	READ_BYTE
	SHR	AL,1
	POP	DI
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	ROR	BL,1
	OR	AL,BL
	CALL	WRITE_BYTE
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP77:					; ???
	JMP	ABSTURZ
OP78:					; SEI
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	OR	SR,00000100B
	RET	
OP79:					; ADC $4488,Y
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	ADC	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER	
OP7A:					; ???
	JMP	ABSTURZ
OP7B:					; ???
	JMP	ABSTURZ
OP7C:					; ???
	JMP	ABSTURZ
OP7D:					; ADC $4488,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	ADC	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	;NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER
OP7E:					; ROR $4488,X
	MOV	ZYKLEN,6
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	SHR	AL,1
	POP	DI
	PUSHF
	MOV	BL,SR
	AND	BL,00000001B
	OR	AL,BL
	CALL	WRITE_BYTE
	POP	BX
	AND	SR,11111110B
	AND	BL,00000001B
	OR	SR,BL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP7F:					; ???
	JMP	ABSTURZ
OP80:					; ???
	JMP	ABSTURZ
OP81:					; STA ($88,X)
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	MOV	AL,AC
	CALL	WRITE_BYTE
	RET
OP82:					; ???
	JMP	ABSTURZ
OP83:					; ???
	JMP	ABSTURZ
OP84:					; STY $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE	
	MOV	DI,AX
	MOV	AL,YR
	CALL	WRITE_BYTE
	RET
OP85:					; STA $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE	
	MOV	DI,AX
	MOV	AL,AC
	CALL	WRITE_BYTE
	RET	
OP86:					; STX $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE	
	MOV	DI,AX
	MOV	AL,XR
	CALL	WRITE_BYTE
	RET
OP87:
	JMP	ABSTURZ
OP88:					; DEY
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	DEC	YR
	PUSHF
	JMP	NZ_TRANSFER	
OP89:					; ???
	JMP	ABSTURZ
OP8A:					; TXA	
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	AL,XR
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP8B:					; ???
	JMP	ABSTURZ	
OP8C:					; STY $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	MOV	AL,YR
	CALL	WRITE_BYTE
	RET
OP8D:					; STA $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	MOV	AL,AC
	CALL	WRITE_BYTE
	RET	
OP8E:					; STX $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	MOV	AL,XR
	CALL	WRITE_BYTE
	RET	
OP8F:					; ???
	JMP	ABSTURZ	
OP90:					; BCC $4488
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	CMP	BL,00000001B
	JNE	OP10_1
	RET
OP91:					; STA ($88),Y
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	MOV	AL,AC
	CALL	WRITE_BYTE
	RET
OP92:					; ???
	JMP	ABSTURZ
OP93:					; ???
	JMP	ABSTURZ
OP94:					; STY $88,X
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	MOV	DI,AX
	MOV	AL,YR
	CALL	WRITE_BYTE
	RET
OP95:					; STA $88,X	
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	MOV	DI,AX
	MOV	AL,AC
	CALL	WRITE_BYTE
	RET	
OP96:					; STX $88,Y
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,YR
	MOV	DI,AX
	MOV	AL,XR
	CALL	WRITE_BYTE
	RET
OP97:					; ???
	JMP	ABSTURZ
OP98:					; TYA		
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	AL,YR
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OP99:					; STA $4488,Y
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	MOV	AL,AC
	CALL	WRITE_BYTE
	RET
OP9A:					; TXS
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	AL,XR
	MOV	CSP,AL
	RET
OP9B:					; ???
	JMP	ABSTURZ
OP9C:					; ???
	JMP	ABSTURZ
OP9D:					; STA $4488,X
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	MOV	AL,AC
	CALL	WRITE_BYTE
	RET		
OP9E:					; ???
	JMP	ABSTURZ
OP9F:					; ???
	JMP	ABSTURZ
OPA0:					; LDY #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	YR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER	
OPA1:					; LDA ($88,X)
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPA2:					; LDX #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	XR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER	
OPA3:					; ???
	JMP	ABSTURZ
OPA4:					; LDY $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	YR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPA5:					; LDA $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPA6:					; LDX $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	XR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER		
OPA7:					; ???
	JMP	ABSTURZ	
OPA8:					; TAY
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	AL,AC
	MOV	YR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPA9:					; LDA #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER		
OPAA:					; TAX
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	AL,AC
	MOV	XR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPAB:					; ???
	JMP	ABSTURZ
OPAC:					; LDY $4488
	MOV 	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	YR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPAD:					; LDA $4488
	MOV 	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPAE:					; LDX $4488
	MOV 	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	XR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER	
OPAF:					; ???
	JMP	ABSTURZ	
OPB0:					; BCS $4488
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000001B
	CMP	BL,00000001B
	JE	OP10_1
	RET		
OPB1:					; LDA ($88),Y			
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC			
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,YR	
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPB2:					; ???
	JMP	ABSTURZ
OPB3:					; ???
	JMP	ABSTURZ
OPB4:					; LDY $88,X
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	YR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPB5:					; LDA $88,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER	
OPB6:					; LDX $88,Y	
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,YR
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	XR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER	
OPB7:					; ???
	JMP	ABSTURZ	
OPB8:
	MOV	ZYKLEN,1		; CLV
	CALL	CS:VIC_6569
	AND	SR,10111111B
	RET	
OPB9:					; LDA $4488,Y
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPBA:					; TSX
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	AL,CSP
	MOV	XR,AL
	RET	
OPBB:					; ???
	JMP	ABSTURZ
OPBC:					; LDY $4488,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	YR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPBD:					; LDA $4488,X
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	AC,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPBE:					; LDX $4488,Y
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	XR,AL
	AND	AL,AL
	PUSHF
	JMP	NZ_TRANSFER
OPBF:					; ???
	JMP	ABSTURZ
OPC0:					; CPY #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	CMP	YR,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER
OPC1:					; CMP ($88,X)
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER
OPC2:					; (Illegal) NOP #$FF
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	INC	PC
	RET	
OPC3:					
	JMP	ABSTURZ
OPC4:					; CPY $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	YR,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER
OPC5:					; CMP $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER	
OPC6:					; DEC $88
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC		
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	;PUSH	DI
	CALL	READ_BYTE
	DEC	AL
	;POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZ_TRANSFER
OPC7:					; ???
	JMP	ABSTURZ
OPC8:					; INY
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	INC	YR
	PUSHF
	JMP	NZ_TRANSFER	
OPC9:					; CMP #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	CMP	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER	
OPCA:					; DEX
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	DEC	XR
	PUSHF
	JMP	NZ_TRANSFER
OPCB:					; ???
	JMP	ABSTURZ
OPCC:					; CPY $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	YR,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER
OPCD:					; CMP $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER	
OPCE:					; DEC $4488
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569					
	MOV	DI,PC			
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	DEC	AL
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZ_TRANSFER
OPCF:					; ???
	JMP	ABSTURZ
OPD0:					; BNE $4488
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000010B
	CMP	BL,00000010B
	JNE	OP10_1
	RET	
OPD1:					; CMP ($88),Y
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER	
OPD2:					; ???
	JMP	ABSTURZ
OPD3:					; ???
	JMP	ABSTURZ
OPD4:					; ???
	JMP	ABSTURZ
OPD5:					; CMP $88,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER
OPD6:					; DEC $88,X
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	PUSH	AX
	MOV	DI,AX
	CALL	READ_BYTE
	DEC	AL
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZ_TRANSFER	
OPD7:					; ???
	JMP	ABSTURZ
OPD8:					; CLD
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	AND	SR,11110111B
	RET
OPD9:					; CMP $4488,Y
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER
OPDA:					; ???
	JMP	ABSTURZ
OPDB:					; ???
	JMP	ABSTURZ
OPDC:					; ???
	JMP	ABSTURZ
OPDD:					; CMP $4488,X	
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER		
OPDE:					; DEC $4488,X
	MOV	ZYKLEN,6
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	DEC	AL
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZ_TRANSFER
OPDF:					; ???
	JMP	ABSTURZ
OPE0:					; CPX #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	CMP	XR,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER
OPE1:					; SBC ($88,X)
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER	
OPE2:					; ???
	JMP	ABSTURZ
OPE3:					; ???
	JMP	ABSTURZ			
OPE4:					; CPX $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	XR,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER
OPE5:					; SBC $88
	MOV	ZYKLEN,2
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER	
OPE6:					; INC $88
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC		
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	INC	AL
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZ_TRANSFER
OPE7:					; ???
	JMP	ABSTURZ
OPE8:					; INX
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	INC	XR
	PUSHF
	JMP	NZ_TRANSFER
OPE9:					; SBC #$88
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER			
OPEA:					; NOP
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	RET
OPEB:					; ???
	JMP	ABSTURZ
OPEC:					; CPX $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	CMP	XR,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NZC_TRANSFER
OPED:					; SBC $4488
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER
OPEE:					; INC $4488
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	INC	AL
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZ_TRANSFER								
OPEF:					; ???
	JMP	ABSTURZ
OPF0:					; BEQ $4488
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	BL,SR
	AND	BL,00000010B
	CMP	BL,00000010B
	JE	OP10_1
	RET	
OPF1:					; SBC ($88),Y
	MOV	ZYKLEN,4
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER		
OPF2:					; ???
	JMP	ABSTURZ
OPF3:					;(Illegal) ISB ($FF),Y
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ	
	MOV	ZYKLEN,7
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOV	DI,AX
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	
	INC	AL			; Wert um 1 erhöen
	PUSHF
	CALL	WRITE_BYTE
	POPF
	PUSH	AX
	CALL	I_NZ_TRANSFER
	POP	AX	
	
	MOV	BL,SR			; Wert vom Accu abziehen
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER		
OPF4:					; ???
	JMP	ABSTURZ
OPF5:					; SBC $88,X
	MOV	ZYKLEN,3	
	CALL	CS:VIC_6569		
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	ADD	AL,XR
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER	
OPF6:					; INC $88,X	
	MOV	ZYKLEN,5
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	CALL	READ_BYTE
	MOVZX	BX,XR
	ADD	AX,BX
	PUSH	AX
	MOV	DI,AX
	CALL	READ_BYTE
	INC	AL
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZ_TRANSFER		
OPF7:					; ???
	JMP	ABSTURZ
OPF8:					; SED
	MOV	ZYKLEN,1
	CALL	CS:VIC_6569
	OR	SR,00001000B
	RET
OPF9:					; SBC $4488,Y
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,YR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER		
OPFA:					; ???
	JMP	ABSTURZ
OPFB:					; ???
	JMP	ABSTURZ
OPFC:					; (Illegal) NOP $4488,X
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	INC	PC
	INC	PC
	RET	
OPFD:					; SBC $4488,X
	MOV	ZYKLEN,3
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	CALL	READ_BYTE
	MOV	BL,SR
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER		
OPFE:					; INC $4488,X
	MOV	ZYKLEN,6
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	PUSH	AX
	CALL	READ_BYTE
	INC	AL
	POP	DI
	PUSHF
	CALL	WRITE_BYTE
	JMP	NZ_TRANSFER
OPFF:					; (Illegal) $09FFH
	CMP	ILLEGAL_OPC,0
	JE	ABSTURZ
	MOV	ZYKLEN,6
	CALL	CS:VIC_6569
	MOV	DI,PC
	INC	PC
	INC	PC
	CALL	READ_WORD
	MOVZX	BX,XR
	ADD	AX,BX
	MOV	DI,AX
	
	CALL	READ_BYTE
	
	INC	AL			; Wert um 1 erhöen
	PUSHF
	CALL	WRITE_BYTE
	POPF
	PUSH	AX
	CALL	I_NZ_TRANSFER
	POP	AX	
	
	MOV	BL,SR			; Wert vom Accu abziehen
	NOT	BL
	AND	BL,00000001B
	PUSHF
	POP	CX
	AND	CL,11111110B
	OR	CL,BL
	PUSH	CX
	POPF
	SBB	AC,AL
	PUSHF
	POP	AX
	MOV	BL,AL
	AND	AL,11111110B
	NOT	BL
	AND	BL,00000001B
	OR	AL,BL
	PUSH	AX
	JMP	NVZC_TRANSFER
	
	
;************************** Interruptbearbeitung für CPU 6510 ***************************

INTERRUPT:
	MOV	AH,I_FLAGS
	AND	AH,00000001B
	JNZ	INTERRUPT_NMI		; Springe wenn NMI Interrupt
	MOV	AH,SR			; Sonst IRQ Interrupt
	AND	AH,00000100B		; Interruptflag im Statusregister Testen
	JNZ	INTERRUPT_00
	DEC	CSP			; Pointer Counter sichern
	MOV	BL,CSP
	MOV	BH,01H
	MOV	DI,BX
	MOV	AX,PC
	CALL	WRITE_WORD
	DEC	CSP
	MOV	BL,CSP			; Statusregister sichern
	MOV	BH,01H
	MOV	DI,BX
	MOV	AL,SR
	CALL	WRITE_BYTE
	DEC	CSP
	OR	SR,00000100B		; Neuen Interrupt verhindern (ausser NMI)
	MOV	DI,0FFFEH
	CALL	READ_WORD
	MOV	PC,AX
INTERRUPT_00:
	;AND	I_FLAGS,11111101B
	MOV	I_FLAGS,0
	RET
INTERRUPT_NMI:
	DEC	CSP			; Pointer Counter sichern
	MOV	BL,CSP
	MOV	BH,01H
	MOV	DI,BX
	MOV	AX,PC
	CALL	WRITE_WORD
	DEC	CSP
	MOV	BL,CSP			; Statusregister sichern
	MOV	BH,01H
	MOV	DI,BX
	MOV	AL,SR
	CALL	WRITE_BYTE
	DEC	CSP
	OR	SR,00000100B
	MOV	DI,0FFFAH
	CALL	READ_WORD
	MOV	PC,AX
	;AND	I_FLAGS,11111110B
	MOV	I_FLAGS,0
	RET
;****************************************
END