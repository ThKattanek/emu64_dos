;****************************************
;*					*
;* Titel: EMU64 GBO			*
;* Autor: Thorsten Kattanek		*
;* Datum: 28.10.1999			*
;* Ort  : Berlin			*
;* Vers : 1.00				*
;* Info : Benutzerführung für den Emu64	*
;*					*
;*					*
;****************************************

EXTRN	GR_READ_MODUS:PROC,GR_SET_MODUS:PROC,GR_INIT_MAUS:PROC,INTU_OPEN_WINDOW:PROC,GR_SET_BOX:PROC,LINIE:PROC,GR_SET_CHAR_FONT:PROC
EXTRN	INTU_START:PROC,INTU_REDRAW_WINDOW:PROC,GR_MAUS_AUS:PROC,GR_MAUS_AN:PROC,INTU_MOVE_WINDOW:PROC,INTU_CLOSE_WINDOW:PROC
EXTRN	INTU_16BIT_ASCII:PROC,INTU_FILE_REQUEST:PROC,INTU_FILE_REQUEST_CLOSE:PROC,LOAD:PROC,RESET_1:PROC
EXTRN	CHAR_X:WORD,CHAR_Y:WORD,CHAR_COLOR:BYTE,CHAR_BACK_COLOR:BYTE,GR_TEXT:PROC,FARBE:BYTE,ROT:BYTE,GRÜN:BYTE,BLAU:BYTE,GR_SET_RGB:PROC
EXTRN	WINDOW_X:WORD,WINDOW_Y:WORD,INTU_REDRAW_OBJEKT:PROC,GR_READ_RGB:PROC,GR_SET_V_LINE:PROC
EXTRN	WINDOW_ANZAHL:BYTE,INTU_STATUS:BYTE,X:WORD,Y:WORD,ABSTURZ_TST:BYTE

EXTRN	GR_SET0_REC:PROC,ILLEGAL_OPC:BYTE,LOST_10:WORD
EXTRN	V_MODUS_GUI:WORD,FLAGS_1:WORD,MAUS_TASTEN:WORD,CONFIG:WORD,C64_GRAFIK_MODUS:PROC,FILE_PUFFER:WORD
EXTRN	PC:WORD,AC:BYTE,XR:BYTE,YR:BYTE,CSP:BYTE,SR:BYTE,C64_RAM:WORD,C64_ROM:WORD,READ_BYTE:PROC,READ_WORD:PROC,CPU_6510:PROC,HALT:WORD,HALT_OK:BYTE
EXTRN	INTU_MESSAGE_BOX:PROC

PUBLIC	GUI,GUI_INIT

.MODEL SMALL
.STACK 200h

;****************************************
.DATA

POINTER_PUFFER	DB 15*15 DUP(?)
POINTER	DB	6,6,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	6,15,6,6,0,0,0,0,0,0,0,0,0,0,0
	DB	0,6,15,15,6,6,0,0,0,0,0,0,0,0,0
	DB	0,6,15,15,15,15,6,6,0,0,0,0,0,0,0
	DB	0,0,6,15,15,15,15,15,6,6,0,0,0,0,0
	DB	0,0,6,15,15,15,15,15,15,15,6,6,0,0,0
	DB	0,0,0,6,15,15,15,15,15,15,15,6,0,0,0
	DB	0,0,0,6,15,15,15,15,15,15,6,0,0,0,0
	DB	0,0,0,0,6,15,15,15,15,15,6,0,0,0,0
	DB	0,0,0,0,6,15,15,15,15,15,15,6,0,0,0
	DB	0,0,0,0,0,6,15,6,6,15,15,15,6,0,0
	DB	0,0,0,0,0,6,6,0,0,6,15,15,15,6,0
	DB	0,0,0,0,0,0,0,0,0,0,6,15,15,15,6
	DB	0,0,0,0,0,0,0,0,0,0,0,6,15,6,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,6,0,0
	
HOCH_IMG	DB	0,0,0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,8,0,0,0,0,0
		DB	0,0,0,0,8,8,8,0,0,0,0
		DB	0,0,0,8,8,8,8,8,0,0,0
		DB	0,0,8,8,8,8,8,8,8,0,0
		DB	0,8,8,8,8,8,8,8,8,8,0
		DB	0,0,0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0,0,0

		
RUNTER_IMG	DB	0,0,0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0,0,0
		DB	0,8,8,8,8,8,8,8,8,8,0
		DB	0,0,8,8,8,8,8,8,8,0,0
		DB	0,0,0,8,8,8,8,8,0,0,0
		DB	0,0,0,0,8,8,8,0,0,0,0
		DB	0,0,0,0,0,8,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0,0,0
		
CLOSE_IMG	DB	0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0
		DB	0,0,8,8,8,8,0,0,0
		DB	0,0,8,8,8,8,0,0,0
		DB	0,0,8,8,8,8,0,0,0
		DB	0,0,8,8,8,8,0,0,0
		DB	0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0
		DB	0,0,0,0,0,0,0,0,0
	
PALETTE	DB	0,15,15
	DB	63,63,63
	DB	63,0,0
	DB 	63,30,30
	DB	63,63,63
	DB	50,50,50
	DB	40,40,40
	DB	30,30,30
	
INCLUDE ICONS\ICON1.IDB
INCLUDE ICONS\ICON2.IDB
INCLUDE ICONS\ICON3.IDB
INCLUDE ICONS\ICON4.IDB
INCLUDE ICONS\ICON5.IDB
INCLUDE ICONS\ICON6.IDB
INCLUDE ICONS\ICON7.IDB

ERR_00			DB "Modus 1024*768 wurde nicht gefunden !!","$"

D64_NAME	DB 	15 DUP(0)
D64_HANDLE	DW	0
BLOCKPUFFER	DB	256 DUP(0)
;                         <------------------------- Track 1-18 --------------------------> <------ Track 19-24 ------> <---- Track 25-30 ----> <-- Track 31-35 -->
TRACK_INDEX     DW      0,0,21,42,63,84,105,126,147,168,189,210,231,252,273,294,315,336,357,376,395,414,433,452,471,490,508,526,544,562,580,598,615,632,649,666,683
TRACK           DB      18
SEKTOR          DB      0
OFFSET_HI	DW	0
OFFSET_LO	DW	0
BLOCK_ZÄHLER	DW	0
START_ADR	DW	0
END_ADR		DW	0
FILE_ANZAHL	DW 	0
PAGE_ZEIGER	DW	0
FILE_AUSWAHL	DW	0
LOAD_OK		DB	0
FILE_TYPE	DB	"DEL",255,"SEQ",255,"PRG",255,"USR",255,"REL",255,"???",255,"???",255,"???",255
ASCII_TO_POKE	DB	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
		DB 	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
		DB	32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47
		DB	48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63
		DB	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21
		DB	22,23,24,25,26,27,28,29,30,31
		DB	64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80
		DB	81,82,83,84,85,86,87,88,89,90,91,92,93,94,95
		DB	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
		DB 	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
		DB	96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112
		DB	113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
		DB	64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80
		DB	81,82,83,84,85,86,87,88,89,90,91,92,93,94,95
		DB	96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112
		DB	113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
		DB	94
		
		


;*********************** Variablen zum Disassemblieren ********************

			; *** BRK X*16+Y+8/0   X=Adressierungsart Y=Taktzyklen (0-7 =1-8) und +8 ist gleich illegaller Opcode
			; *** Adressierungsart  0= Impliziet
			;			1= Unmittelbar
			;			2= Absolut
			;			3= Zeropage
			;			4= Absolut X Indexziert
			;			5= Absolut Y Indexziert
			;			6= Zeropage X Indexziert
			;			7= Indirekt X Indexziert
			;			8= Indirekt Y Indexziert
			;			9= Relativ
			;			10=Indirekt
			;			11=Zeropage Y Indexiert


CPU_OPC			DB "BRK",0*16+6+0,"ORA",7*16+5+0,"JAM",0*16+0+8,"SLO",7*16+7+8,"NOP",3*16+2+8,"ORA",3*16+2+0,"ASL",3*16+4+0,"SLO",3*16+4+8,"PHP",0*16+2+0,"ORA",1*16+1+0,"ASL",0*16+1+0,"ANC",1*16+1+8,"NOP",2*16+3+8,"ORA",2*16+3+0,"ASL",2*16+5+0,"SLO",2*16+5+8
			DB "BPL",9*16+1+0,"ORA",8*16+4+0,"JAM",0*16+0+8,"SLO",8*16+7+8,"NOP",6*16+3+8,"ORA",6*16+3+0,"ASL",6*16+5+0,"SLO",6*16+5+8,"CLC",0*16+1+0,"ORA",5*16+3+0,"NOP",0*16+1+8,"SLO",5*16+6+8,"NOP",4*16+3+8,"ORA",4*16+3+0,"ASL",4*16+6+0,"SLO",4*16+6+8
			DB "JSR",2*16+5+0,"AND",7*16+5+0,"JAM",0*16+0+8,"RLA",7*16+7+8,"BIT",3*16+2+0,"AND",3*16+2+0,"ROL",3*16+4+0,"RLA",3*16+4+8,"PLP",0*16+3+0,"AND",1*16+1+0,"ROL",0*16+1+0,"ANC",1*16+1+8,"BIT",2*16+3+0,"AND",2*16+3+0,"ROL",2*16+5+0,"RLA",2*16+5+8
			DB "BMI",9*16+1+0,"AND",8*16+4+0,"JAM",0*16+0+8,"RLA",8*16+7+8,"NOP",6*16+3+8,"AND",6*16+3+0,"ROL",6*16+5+0,"RLA",6*16+5+8,"SEC",0*16+1+0,"AND",5*16+3+0,"NOP",0*16+1+8,"RLA",5*16+6+8,"NOP",4*16+3+8,"AND",4*16+3+0,"ROL",4*16+6+0,"RLA",4*16+6+8
			DB "RTI",0*16+5+0,"EOR",7*16+5+0,"JAM",0*16+0+8,"SRE",7*16+7+8,"NOP",3*16+2+8,"EOR",3*16+2+0,"LSR",3*16+4+0,"SRE",3*16+4+8,"PHA",0*16+2+0,"EOR",1*16+1+0,"LSR",0*16+1+0,"ASR",1*16+1+8,"JMP",2*16+2+0,"EOR",2*16+4+0,"LSR",2*16+5+0,"SRE",2*16+5+8
			DB "BVC",9*16+1+0,"EOR",8*16+4+0,"JAM",0*16+0+8,"SRE",8*16+7+8,"NOP",6*16+3+8,"EOR",6*16+3+0,"LSR",6*16+5+0,"SRE",6*16+5+8,"CLI",0*16+1+0,"EOR",5*16+3+0,"NOP",0*16+1+8,"SRE",5*16+6+8,"NOP",4*16+3+8,"EOR",4*16+3+0,"LSR",4*16+6+0,"SRE",4*16+6+8
			DB "RTS",0*16+5+0,"ADC",7*16+5+0,"JAM",0*16+0+8,"RRA",7*16+7+8,"NOP",3*16+2+8,"ADC",3*16+2+0,"ROR",3*16+4+0,"RRA",3*16+4+8,"PLA",0*16+2+0,"ADC",1*16+1+0,"ROR",0*16+1+0,"ARR",1*16+1+8,"JMP",10*16+4+0,"ADC",2*16+3+0,"ROR",2*16+5+0,"RRA",2*16+5+8
			DB "BVS",9*16+1+0,"ADC",8*16+4+0,"JAM",0*16+0+8,"RRA",8*16+7+8,"NOP",6*16+3+8,"ADC",6*16+3+0,"ROR",6*16+5+0,"RRA",6*16+5+8,"SEI",0*16+1+0,"ADC",5*16+3+0,"NOP",0*16+1+8,"ARR",5*16+6+8,"NOP",4*16+3+8,"ADC",4*16+3+0,"ROR",4*16+6+0,"RRA",4*16+6+8
			DB "NOP",0*16+1+8,"STA",7*16+5+0,"NOP",0*16+1+8,"SAX",7*16+5+8,"STY",3*16+2+0,"STA",3*16+2+0,"STX",3*16+2+0,"SAX",3*16+2+8,"DEY",0*16+1+0,"NOP",1*16+1+8,"TXA",0*16+1+0,"ANE",1*16+1+8,"STY",2*16+3+0,"STA",2*16+3+0,"STX",2*16+3+0,"SAX",2*16+3+8
			DB "BCC",9*16+1+0,"STA",8*16+5+0,"JAM",0*16+0+8,"SHA",4*16+5+8,"STY",6*16+1+0,"STA",6*16+3+0,"STX",6*16+3+0,"SAX",11*16+3+8,"TYA",0*16+1+0,"STA",5*16+1+0,"TXS",0*16+1+0,"SHS",5*16+4+8,"SHY",5*16+4+8,"STA",4*16+4+0,"SHX",4*16+4+8,"SHA",5*16+4+8
			DB "LDY",1*16+1+0,"LDA",7*16+5+0,"LDX",1*16+1+0,"LAX",7*16+5+8,"LDY",3*16+2+0,"LDA",3*16+2+0,"LDX",3*16+2+0,"LAX",3*16+2+8,"TAY",0*16+1+0,"LDA",1*16+1+0,"TAX",0*16+1+0,"LXA",1*16+1+8,"LDY",2*16+3+0,"LDA",2*16+3+0,"LDX",2*16+3+0,"LAX",2*16+3+8
			DB "BCS",9*16+1+0,"LDA",8*16+4+0,"JAM",0*16+0+8,"LAX",8*16+4+8,"LDY",6*16+1+0,"LDA",6*16+3+0,"LDX",11*16+3+0,"LAX",11*16+3+8,"CLV",0*16+1+0,"LDA",5*16+3+0,"TSX",0*16+1+0,"LAE",5*16+3+8,"LDY",4*16+3+0,"LDA",4*16+3+0,"LDX",5*16+3+0,"LAX",5*16+3+8
			DB "CPY",1*16+1+0,"CMP",7*16+5+0,"NOP",1*16+1+8,"DCP",7*16+7+8,"CPY",3*16+2+0,"CMP",3*16+2+0,"DEC",3*16+4+0,"DCP",3*16+4+8,"INY",0*16+1+0,"CMP",1*16+1+0,"DEX",0*16+1+0,"SBX",1*16+1+8,"CPY",1*16+3+0,"CMP",2*16+3+0,"DEC",2*16+5+0,"DCP",2*16+5+8
			DB "BNE",9*16+1+0,"CMP",8*16+4+0,"JAM",0*16+0+8,"DCP",8*16+7+8,"NOP",6*16+3+8,"CMP",6*16+3+0,"DEC",6*16+5+0,"DCP",6*16+5+8,"CLD",0*16+1+0,"CMP",5*16+3+0,"NOP",0*16+1+8,"DCP",5*16+6+8,"NOP",4*16+3+8,"CMP",4*16+3+0,"DEC",4*16+6+0,"DCP",4*16+6+8
			DB "CPX",1*16+1+0,"SBC",7*16+5+0,"NOP",1*16+1+8,"ISB",7*16+7+8,"CPX",3*16+2+0,"SBC",3*16+2+0,"INC",3*16+4+0,"ISB",3*16+4+8,"INX",0*16+1+0,"SBC",1*16+1+0,"NOP",0*16+1+0,"SBC",1*16+1+8,"CPX",2*16+3+0,"SBC",2*16+3+0,"INC",2*16+5+0,"ISB",2*16+5+8
			DB "BEQ",9*16+1+0,"SBC",8*16+4+0,"JAM",0*16+0+8,"ISB",8*16+7+8,"NOP",6*16+3+8,"SBC",6*16+3+0,"INC",6*16+5+0,"ISB",6*16+5+8,"SED",0*16+1+0,"SBC",5*16+3+0,"NOP",0*16+1+8,"SBC",5*16+6+8,"NOP",4*16+3+8,"SBC",4*16+3+0,"INC",4*16+6+0,"ISB",4*16+6+8

ADRESSIERUNGS_TBL	DW ADR0,ADR1,ADR2,ADR3,ADR4,ADR5,ADR6,ADR7,ADR8,ADR9,ADR10,ADR11
OPC_LNG			DB 1,2,3,2,3,3,2,2,2,2,3,2
OPC_TMP			DB 0
LNG_TMP			DB 0

PC_ZEIGER		DW 0A43AH
DISASS_TXT		DB 20*31 DUP(0)
HEX_TBL			DB "0123456789ABCDEF"
ASSCII_TO_HEX_TBL	DB "00112233445566778899AaBbCcDdEeFf"
COUNTER			DB 0
ZEILE			DW 0
SHOW_ASSCII		DB "A43A"
SHOW_HEX		DW 0A43AH
HALT_ASSCII		DB "0000"
HALT_HEX		DW 00000H
FILE_TYP		DB 1,"D64"


;*************************************

;FILENAME	DB 15 DUP (?)

;********************* D64 Laden ***************************

FR_NAME1	DB "Diskimage Laden !!",0
FR_OK1		DB "Laden!",0
FR_ABBRUCH1	DB "Abbruch!",0
;***************** ERROR MELDUNGEN !! **********************

MSG_B_00	DB 29
		DB 0
		DW MSG_B_NAME_00
		DW ERR_MSG_00
MSG_B_NAME_00	DB "Fehler",0

ERR_MSG_00		DB "Ung",129,"ltige Hexadezimale Zahl !",0

;********************* MENÜ FENSTER ************************

FENSTER_01	DB 01
		DW 10,5,285,64
		DW F_NAME_01
		DB 7
		DB 15					
		DW F01_00
		DB 15
		DW F01_01
		DB 15
		DW F01_02
		DB 15
		DW F01_03
		DB 15
		DW F01_04
		DB 15
		DW F01_05
		DB 15
		DW F01_06
		DB 15
		DW F01_07
		DB 0
F_NAME_01	DB "Emu64 1.00 Beta",0

F01_00		DW 5,23,32,32
		DW ICON1
		DW RUN_C64
F01_01		DW 85,23,32,32
		DW ICON3
		DW LOAD_D64
F01_02		DW 125,23,32,32
		DW ICON2
		DW OPTIONEN
F01_03		DW 165,23,32,32
		DW ICON5
		DW DEBUGGER
F01_04		DW 245,23,32,32
		DW ICON4
		DW ENDE_EMU64
F01_05		DW 268,5,9,9				;*** Option Ende ***
		DW CLOSE_IMG
		DW ENDE_EMU64
F01_06		DW 45,23,32,32
		DW ICON6
		DW HARD_RESET
F01_07		DW 205,23,32,32
		DW ICON7
		DW INFO

;********************* DEBUGGER *****************************

FENSTER_02	DB 02
		DW 100,100,500,380
		DW F_NAME_02
		DB 7
		DB 17
		DW F02_00
		DB 16
		DW F02_01
		DB 16
		DW F02_02
		DB 15
		DW F02_03
		DB 5
		DW F02_04
		DB 1
		DW F02_05
		DB 14
		DW F02_06
		DB 2
		DW F02_07
		DB 1
		DW F02_08
		DB 1
		DW F02_09
		DB 2
		DW F02_10
		DB 1
		DW F02_11
		DB 14
		DW F02_12
		DB 1
		DW F02_13
		
		DB 10
		DW F02_90
		DB 10
		DW F02_91
		DB 0
F_NAME_02	DB "6510 Debugger",0

F02_00		DW 8,26,283,324				;*** DISASSEMBLER Listing ***
		DB 31
		DB 20
		DB 15
		DB 0
		DB 0
		DB 0
		DB 20
		DW DISASS_TXT
		DW @DATA
		DW ASSEMBLE
		DB 20 DUP (?)
F02_01		DW 293,27,11,10				;*** Listing hoch ***
		DW HOCH_IMG
		DW DISASS_LIST_HOCH
F02_02		DW 293,335,11,10			;*** Listing runter ***
		DW RUNTER_IMG
		DW DISASS_LIST_RUNTER	
F02_03		DW 483,5,9,9				;*** Debugger Ende ***
		DW CLOSE_IMG
		DW ENDE_DEBUGGER
F02_04		DW 8,26,0,0				;*** Spalten in Disassembli Text zeichnen ***
		DW USER_00				
F02_05		DW 8,352,40,18				;*** Button für List $..... ***		
		DW SHOW
		DB 4,"Show",0 				;*** Eingabefeld für 4 Stellige Hexzahl ***
F02_06		DW 53,352,41,18
		DB 1,0
		DW 4
		DW 4
		DW 4
		DW 0
		DW SHOW_ASSCII
		DB 4
		DB 4
F02_07		DW 319,25,0,0				;*** Register Anzeige TEXT ***
		DB 0,1
		DB "PC : "
ASSCII_PC	DB "0000",10,13
		DB "IRQ: "
ASSCII_IRQ	DB "0000",10,13
		DB "AC : "
ASSCII_AC	DB "00",10,13
		DB "XR : "
ASSCII_XR	DB "00",10,13
		DB "YR : "
ASSCII_YR	DB "00",10,13
		DB "SP : "
ASSCII_SP	DB "00",10,13
		DB "SR : "
ASSCII_SR	DB "00  "
ASSCII_SR_BIN	DB "11100101",10,13
		DB "         NU/BDIZC",0

F02_08		DW 315,140,40,18				;*** Button für Next Befehl ***		
		DW STEP
		DB 4,"STEP",0
F02_09		DW 315,160,7*9+4,18				;*** Button für Next Befehl ***		
		DW ANIMATE
		DB 7,"ANIMATE",0
F02_10		DW 315,220,0,0
		DB 0,1
		DD 1
		DB 10,13
		DD 1
		DB 10,13
		DD 1
		DB 10,13
		DD 1
		DB 10,13
		DD 4
		DB 10,13
		DD 1
		DB 10,13
		DD 1
		DB 10,13
		DD 1
		DB 10,13
		DD 1
		DB 10,13
		DD 1
		DB 10,13,0
F02_11		DW 315,180,40,18					;*** Button für Halt $..... ***		
		DW HERE
		DB 4,"HALT",0 					;*** Eingabefeld für 4 Stellige Hexzahl ***
F02_12		DW 315+45,180,41,18
		DB 1,0
		DW 4
		DW 4
		DW 4
		DW 0
		DW HALT_ASSCII
		DB 4
		DB 4
F02_13		DW 315,200,49,18					;*** Button für Halt $..... ***		
		DW SOFT_RESET
		DB 5,"RESET",0 	

F02_90		DW 5,23,306,350
		DB 0
F02_91		DW 315,23,170,110
		DB 0
		
;********************* OPTIONS FENSTER ************************

FENSTER_03	DB 03
		DW 100,100,200,115
		DW F_NAME_03
		DB 7
		DB 2
		DW F03_03
		DB 1
		DW F03_00
		DB 1
		DW F03_01
		DB 15
		DW F03_04
		DB 9
		DW F03_05
		DB 2
		DW F03_06
		DB 0
F_NAME_03	DB "Emu64 Optionen ",0

F03_00		DW 45,50,100,20
		DW C64_MODUS_WECHSEL_1
		DB 7,"320*200",0
F03_01		DW 45,70,100,20
		DW C64_MODUS_WECHSEL_2
		DB 7,"360*240",0
F03_02		DW 10,30,0,0
		DB 2,1
		DB "Video Modus: 320*200",0
F03_03		DW 10,30,0,0
		DB 2,1
		DB "Video Modus: 360*240",0
F03_04		DW 183,5,9,9				;*** Option Ende ***
		DW CLOSE_IMG
		DW ENDE_OPTION
F03_05		DW 10,95,10,10
		DB 0
		DB 2
		DW ILLEGAL_OPCODES
F03_06		DW 25,92,0,0
		DB 0,1
		DB "Illegale Opcodes",0
		
;********************* C64 PROGRAMM AUS D64 LADEN FENSTER ************************

FENSTER_04	DB 04
		DW 100,100,200,350
		DW F_NAME_04
		DB 7
		DB 5
		DW F04_00
		DB 5
		DW F04_01
		DB 1
		DW F04_02
		DB 1
		DW F04_03
		DB 4
		DW F04_04
		DB 13
		DW F04_05
		DB 5
		DW F04_06
		DB 15
		DW F04_07
		DB 0
F_NAME_04	DB "C64 Programm laden",0

F04_00		DW 7,25,0,0
		DW VIEW_D64_NAME
		DB 25 DUP (0)
F04_01		DW 7,35,0,0
		DW VIEW_D64_DIR
F04_02		DW 75,300,40,18				;*** Button für Next Befehl ***		
		DW LOAD_C64
		DB 4,"LOAD",0
F04_03		DW 35,320,121,18				;*** Button für Next Befehl ***		
		DW LOAD_RUN_C64
		DB 12,"LOAD und RUN",0
F04_04		DW 180,35,13,244
		DW 0
		DW 243
		DW C64_FILE_SCROLL
F04_05		DW 8,36,163,238
		DW 0
		DW 0
		DW C64_FILE_AUSWAHL
F04_06		DW 23,280,0,0
		DW VIEW_C64_AUSWAHL
F04_07		DW 183,5,9,9				;*** Option Ende ***
		DW CLOSE_IMG
		DW D64_LADEN_ENDE

;********************* Bitte warten !! FENSTER ************************

FENSTER_05	DB 05
		DW 100,100,170,90
		DW F_NAME_05
		DB 7+8
		DB 2
		DW F05_01
		DB 0
F_NAME_05	DB "Meldung !!",0

F05_01		DW 20,40,0,0
		DB 0,1
		DB "Bitte Warten !",0
		
;********************* CPU Absturz !! FENSTER ************************

FENSTER_06	DB 06
		DW 100,100,350,110
		DW F_NAME_06
		DB 7+8
		DB 2
		DW F06_00
		DB 1
		DW F06_01
		DB 0
F_NAME_06	DB "Absturz !!",0

F06_00		DW 20,40,0,0
		DB 0,1
		DB "Der Prozessor ist an Adresse $"
ADR		DB 4 DUP(0),10,13
		DB "     abgest",129,"rzt !",0
F06_01		DW 164,85,22,18				;*** Button für Next Befehl ***		
		DW ABSTURZ_OK
		DB 2,"OK",0
		
;********************* EMULATION OPTIONS FENSTER ************************

FENSTER_07	DB 07
		DW 100,100,200,250
		DW F_NAME_07
		DB 7
		DB 2
		DW F07_03
		DB 1
		DW F07_00
		DB 1
		DW F07_01
		DB 15
		DW F07_04
		DB 9
		DW F07_05
		DB 2
		DW F07_06
		DB 9
		DW F07_07
		DB 2
		DW F07_08
		DB 2
		DW F07_11
		DB 1
		DW F07_09
		DB 1
		DW F07_10
		DB 0
F_NAME_07	DB "EMU64 Optionen ",0

F07_00		DW 45,50,100,20
		DW C64_MODUS_WECHSEL_1
		DB 7,"320*200",0
F07_01		DW 45,70,100,20
		DW C64_MODUS_WECHSEL_2
		DB 7,"360*240",0
F07_02		DW 10,30,0,0
		DB 2,1
		DB "Video Modus: 320*200",0
F07_03		DW 10,30,0,0
		DB 2,1
		DB "Video Modus: 360*240",0
F07_04		DW 183,5,9,9				;*** Option Ende ***
		DW CLOSE_IMG
		DW ENDE_GRAFIK_OPTION
F07_05		DW 25,100,10,10
		DB 0
		DB 2
		DW FARB_WECHSEL
F07_06		DW 40,97,0,0
		DB 0,1
		DB "Schrwarz/Weiss",0
		
F07_07		DW 15,140,10,10
		DB 0
		DB 2
		DW ILLEGAL_OPCODES
F07_08		DW 30,137,0,0
		DB 0,1
		DB "Illegale Opcodes",0
F07_09		DW 45,180,100,20
		DW C64_FREQUENZ_WECHSEL_1
		DB 5,"50 Hz",0
F07_10		DW 45,200,100,20
		DW C64_FREQUENZ_WECHSEL_2
		DB 5,"60 Hz",0
F07_11		DW 10,160,0,0
		DB 2,1
		DB "Frequenz: 50 Hz PAL ",0
F07_12		DW 10,160,0,0
		DB 2,1
		DB "Frequenz: 60 Hz NTSC",0
		
;*********************** INFO FENSTER ***********************

FENSTER_08	DB 08
		DW 100,100,348,185
		DW F_NAME_08
		DB 7
		DB 11							;** Listfeld mit Info Text **
		DW F08_01	
		DB 4							;** Vertical Scrollbalken **
		DW F08_02
		DB 1							;** Button "OK" **
		DW F08_03
		DB 0
F_NAME_08	DB "-EMU64- Relaise 1.00 Beta",0

F08_01		DW 10,23,310,132					;** Infotext als Listfeld **
		DB 34
		DB 8
		DB 15
		DB 0
		DB 0
		DB 0
		DB 18
		DW INFO_TXT
		DW @DATA						
		DW DL_10
INFO_TXT	DB "Autor  : Thorsten Kattanek        "
		DB "Ort    : Berlin                   "
		DB "Datum  : 15.01.2000               "
		DB "Sprache: 100% Assembler (TA 4.0)  "
		DB "Web    : www.Emu64.de             "
		DB "E-Mail : Th.Kattanek@Emu64.de     "
		DB "                                  "
		DB "Dieser Emulator ist Freeware !!   "
		DB "Er kann frei weitergegeben werden,"
		DB "jedoch so wie er von der Homepage "
		DB "runtergeladen wurde.              "
		DB "Ich trage keinerlei Verantwortung "
		DB "f",129,"r ein nicht funktionieren dieser"
		DB "Software.                         "
		DB "Dieser Emulator wird st",132,"ndig      "
		DB "weiterentwickelt.                 "
		DB "                                  "
		DB "MfG Th.Kattanek                   "	
		
F08_02		DW 327,23,14,124					;** Vertkaler Scrollbalken **
		DW 0
		DW 30
		DW INFO_SCROLL
F08_03		DW 150,162,20,17					;** OK Button
		DW INFO_ENDE
		DB 2,"OK",0

;*******************************************************************************************************************************************
.486
.CODE
;****************** START-SEQUENCE **************************	

GUI_INIT:
	CALL	VIEW_LOST_10
	MOV	HALT_OK,0
	MOV	AX,V_MODUS_GUI
	CALL	GR_SET_MODUS
	CALL	CMW_10
	CALL	CFW_10
	CALL	IO_10
	CALL	FW_10
	
	MOV	AL,0
	MOV	SI,0
GUII_10:
	MOV	AH,PALETTE[SI]
	MOV	ROT,AH
	MOV	AH,PALETTE[SI+1]
	MOV	GRÜN,AH
	MOV	AH,PALETTE[SI+2]
	MOV	BLAU,AH
	MOV	FARBE,AL
	PUSH	AX SI
	CALL	GR_SET_RGB
	POP	SI AX
	ADD	SI,3
	INC	AL
	CMP	AL,8
	JNE	GUII_10
	
	MOV	AX,15
	MOV	BX,15
	LEA	CX,POINTER
	LEA	DX,POINTER_PUFFER
	CALL	GR_INIT_MAUS

	MOV	AX,0FH
	MOV	CX,8
	MOV	DX,8
	INT	33H
	
	MOV	AX,X
	SHR	AX,1
	SUB	AX,142
	MOV	WORD PTR FENSTER_01[1],AX
	
	LEA	DI,FENSTER_01
	CALL	INTU_OPEN_WINDOW
	
	CALL	TRANS_REGISTER
	CALL	INTU_START
	RET
GUI:
	CALL	VIEW_LOST_10
	MOV	HALT_OK,0
	MOV	AX,V_MODUS_GUI
	CALL	GR_SET_MODUS
	
	CALL	GR_MAUS_AN
	
	MOV	AL,0
	MOV	SI,0
GUI_10:
	MOV	AH,PALETTE[SI]
	MOV	ROT,AH
	MOV	AH,PALETTE[SI+1]
	MOV	GRÜN,AH
	MOV	AH,PALETTE[SI+2]
	MOV	BLAU,AH
	MOV	FARBE,AL
	PUSH	AX SI
	CALL	GR_SET_RGB
	POP	SI AX
	ADD	SI,3
	INC	AL
	CMP	AL,8
	JNE	GUI_10
	
	MOV	AX,15
	MOV	BX,15
	LEA	CX,POINTER
	LEA	DX,POINTER_PUFFER
	CALL	GR_INIT_MAUS
	CALL	TRANS_REGISTER
	
	CMP	ABSTURZ_TST,0
	JE	GUI_20
	
	CMP	ABSTURZ_TST,2
	JE	GUI_20
	
	DEC	PC
	MOV	AX,PC
	
	LEA	DI,ADR
	CALL	HEX_WORD_OUT
	
	MOV	PC_ZEIGER,AX
	CALL	TRANS_REGISTER
	
	CALL	DISASSEMBLE
	LEA	DI,FENSTER_02
	CALL	INTU_OPEN_WINDOW
	
	MOV	AX,X
	SHR	AX,1
	SUB	AX,175
	MOV	BX,Y
	SHR	BX,1
	SUB	BX,55
	
	MOV	WORD PTR FENSTER_06[1],AX
	MOV	WORD PTR FENSTER_06[3],BX
	LEA	DI,FENSTER_06
	CALL	INTU_OPEN_WINDOW
GUI_20:
	MOV	ABSTURZ_TST,0
	CALL	INTU_START
	
	RET
	
;***************** Unterfunktionen für Menü **********************

RUN_C64:
	OR	INTU_STATUS,1
	RET
ENDE_EMU64:
	OR	INTU_STATUS,3
	RET
LOAD_D64:
	MOV	AL,04
	CALL	INTU_CLOSE_WINDOW
	LEA	AX,FR_NAME1
	LEA	BX,FR_OK1
	LEA	CX,FR_ABBRUCH1
	LEA	DX,D64_NAME
	LEA	DI,D64_LADEN
	LEA	SI,FILE_TYP
	CALL	INTU_FILE_REQUEST
	RET
OPTIONEN:
	LEA	DI,FENSTER_07
	CALL	INTU_OPEN_WINDOW
	RET
DEBUGGER:
	CALL	DISASSEMBLE
	LEA	DI,FENSTER_02
	CALL	INTU_OPEN_WINDOW
	RET
HARD_RESET:
	PUSH	ES
	CALL	RESET_1
	POP	ES
	MOV	FS,C64_RAM
	MOV	BYTE PTR FS:08004H,0
	OR	INTU_STATUS,1
	RET
INFO:
	LEA	DI,FENSTER_08
	CALL	INTU_OPEN_WINDOW
	RET

;****************** FUNKTIONEN INFO FENSTER *********************

INFO_SCROLL:
	MOV	AX,[SI+8]
	MOV	CL,3
	SHR	AL,CL
	MOV	BYTE PTR F08_01[12],AL
	LEA	DI,FENSTER_08
	MOV	AL,0
	CALL	INTU_REDRAW_OBJEKT
	RET
INFO_ENDE:
	MOV	AL,08
	CALL	INTU_CLOSE_WINDOW
	RET	
	
;**************** Unterfunktion D64 Laden ************************

D64_LADEN:
	MOV	LOAD_OK,0
	CMP	D64_NAME,0
	JE	DL_10
	CALL	INTU_FILE_REQUEST_CLOSE
	CALL	READ_D64_DIR
	LEA	DI,FENSTER_04
	CALL	INTU_OPEN_WINDOW
DL_10:
	RET
D64_LADEN_ENDE:
	MOV	AL,04H
	CALL	INTU_CLOSE_WINDOW
	RET

;*************** Unterfunktion für Optionen **********************

ENDE_OPTION:
	MOV	AL,03
	CALL	INTU_CLOSE_WINDOW
	RET
	

	
;*************** Unterfunktion für C64 Grafik Optionen ************

ENDE_GRAFIK_OPTION:
	MOV	AL,07
	CALL	INTU_CLOSE_WINDOW
	RET
	
C64_MODUS_WECHSEL_1:
	MOV	BYTE PTR CONFIG[7],0
	CALL	CMW_10
	MOV	AL,0
	LEA	DI,FENSTER_07
	CALL	INTU_REDRAW_OBJEKT
	RET
	
C64_MODUS_WECHSEL_2:
	MOV	BYTE PTR CONFIG[7],1
	CALL	CMW_10
	MOV	AL,0
	LEA	DI,FENSTER_07
	CALL	INTU_REDRAW_OBJEKT
	RET
CMW_10:
	CMP	BYTE PTR CONFIG[7],1
	JE	CMW_20
	
	LEA	AX,F03_02
	MOV	WORD PTR FENSTER_07[13],AX
	RET
CMW_20:
	LEA	AX,F03_03
	MOV	WORD PTR FENSTER_07[13],AX
	RET
FARB_WECHSEL:
	MOV	AL,BYTE PTR F07_05[8]
	MOV	BYTE PTR CONFIG[9],AL
	RET
FW_10:
	MOV	AL,BYTE PTR CONFIG[9]
	MOV	BYTE PTR F07_05[8],AL
	RET
	
ILLEGAL_OPCODES:
	MOV	AL,BYTE PTR F07_07[8]
	MOV	ILLEGAL_OPC,AL
	MOV	BYTE PTR CONFIG[8],AL
	RET
IO_10:
	MOV	AL,BYTE PTR CONFIG[8]
	MOV	BYTE PTR F07_07[8],AL
	MOV	ILLEGAL_OPC,AL
	RET
	
C64_FREQUENZ_WECHSEL_1:
	MOV	BYTE PTR CONFIG[10],0
	CALL	CFW_10
	MOV	AL,8
	LEA	DI,FENSTER_07
	CALL	INTU_REDRAW_OBJEKT
	RET
	
C64_FREQUENZ_WECHSEL_2:
	MOV	BYTE PTR CONFIG[10],1
	CALL	CFW_10
	MOV	AL,8
	LEA	DI,FENSTER_07
	CALL	INTU_REDRAW_OBJEKT
	RET
CFW_10:
	CMP	BYTE PTR CONFIG[10],1
	JE	CFW_20
	
	LEA	AX,F07_11
	MOV	WORD PTR FENSTER_07[37],AX
	RET
CFW_20:
	LEA	AX,F07_12
	MOV	WORD PTR FENSTER_07[37],AX
	RET
	
;*************** Unterfunktion für Debugger **********************
SOFT_RESET:
	MOV	PC,0FCE2H
	PUSH	ES
	MOV	ES,C64_RAM
	MOV	SR,00000100B
  	MOV	BYTE PTR ES:01,007H  		; *** Prozessorport beschreiben ***
	POP	ES
	
	CALL	VIEW_LOST_10
	CALL	TRANS_REGISTER
	CALL	DISASSEMBLE
	LEA	DI,FENSTER_02
	MOV	AL,0
	CALL	GR_MAUS_AUS
	CALL	INTU_REDRAW_OBJEKT
	MOV	AL,4
	CALL	INTU_REDRAW_OBJEKT
	MOV	AL,7
	CALL	INTU_REDRAW_OBJEKT
	MOV	AL,10
	CALL	INTU_REDRAW_OBJEKT
	CALL	GR_MAUS_AN
	RET
HERE:
	LEA	DI,HALT_ASSCII
	CALL	ASSCII_TO_HEX
	JC	H_10
	MOV	HALT,AX
	MOV	HALT_OK,1
	OR	INTU_STATUS,1
	RET
H_10:
	MOV	AL,0
	LEA	DI,MSG_B_00
	CALL	INTU_MESSAGE_BOX
	RET
ABSTURZ_OK:
	MOV	AL,06
	CALL	INTU_CLOSE_WINDOW
	RET
VIEW_LOST_10:
	LEA	DI,F02_10
	ADD	DI,10
	MOV	SI,0
VL_10:
	MOV	AX,LOST_10[SI]
	PUSH	SI DI
	CALL	HEX_WORD_OUT
	POP	DI SI
	
	ADD	DI,6
	ADD	SI,2
	CMP	SI,20
	JNE	VL_10

	RET
ENDE_DEBUGGER:
	MOV	AL,02
	CALL	INTU_CLOSE_WINDOW
	RET
DISASS_LIST_HOCH:
	DEC	PC_ZEIGER
	CALL	DISASSEMBLE
	LEA	DI,FENSTER_02
	MOV	AL,0
	CALL	GR_MAUS_AUS
	CALL	INTU_REDRAW_OBJEKT
	MOV	AL,4
	CALL	INTU_REDRAW_OBJEKT
	CALL	GR_MAUS_AN
	RET
DISASS_LIST_RUNTER:
	INC	PC_ZEIGER
	CALL	DISASSEMBLE
	LEA	DI,FENSTER_02
	MOV	AL,0
	CALL	GR_MAUS_AUS
	CALL	INTU_REDRAW_OBJEKT
	MOV	AL,4
	CALL	INTU_REDRAW_OBJEKT
	CALL	GR_MAUS_AN	
	RET
USER_00:
	MOV	AX,[SI]
	ADD	AX,WINDOW_X
	MOV	BX,[SI+2]
	ADD	BX,WINDOW_Y
	
	ADD	AX,9*5
	ADD	BX,2
	MOV	DX,318
	MOV	CL,8
	CALL	GR_SET_V_LINE
	ADD	AX,10*9
	CALL	GR_SET_V_LINE
	ADD	AX,13*9
	CALL	GR_SET_V_LINE
	RET
SHOW:
	LEA	DI,SHOW_ASSCII
	CALL	ASSCII_TO_HEX
	JC	H_10
	MOV	PC_ZEIGER,AX
	CALL	DISASSEMBLE
	LEA	DI,FENSTER_02
	MOV	AL,0
	CALL	GR_MAUS_AUS
	CALL	INTU_REDRAW_OBJEKT
	MOV	AL,4
	CALL	INTU_REDRAW_OBJEKT
	CALL	GR_MAUS_AN	
	RET


AS_20:
	MOV	AX,SI
	SHR	AL,1
	CLC
	RET
STEP:
	CALL	VIEW_LOST_10
	OR	FLAGS_1,4
	PUSH	ES
	CALL	CPU_6510
	POP	ES
	CALL	TRANS_REGISTER
	CALL	DISASSEMBLE
	LEA	DI,FENSTER_02
	MOV	AL,0
	CALL	GR_MAUS_AUS
	CALL	INTU_REDRAW_OBJEKT
	MOV	AL,4
	CALL	INTU_REDRAW_OBJEKT
	MOV	AL,7
	CALL	INTU_REDRAW_OBJEKT
	MOV	AL,10
	CALL	INTU_REDRAW_OBJEKT
	CALL	GR_MAUS_AN
	AND	FLAGS_1,1111111111111011B
	RET
ANIMATE:
	CALL	STEP
	MOV	DI,MAUS_TASTEN
	AND	DI,1
	JZ	ANIMATE
ANIMATE_10:
	MOV	DI,MAUS_TASTEN
	AND	DI,1
	JNZ	ANIMATE_10
	
	RET
	
TRANS_REGISTER:
	
	MOV	AX,PC
	MOV	PC_ZEIGER,AX
	LEA	DI,ASSCII_PC
	CALL	HEX_WORD_OUT
	
	MOV	DI,0314H
	PUSH	ES
	CALL	READ_WORD
	POP	ES
	LEA	DI,ASSCII_IRQ
	CALL	HEX_WORD_OUT
	
	MOV	AL,AC
	LEA	DI,ASSCII_AC
	CALL	HEX_BYTE_OUT
	
	MOV	AL,XR
	LEA	DI,ASSCII_XR
	CALL	HEX_BYTE_OUT
	
	MOV	AL,YR
	LEA	DI,ASSCII_YR
	CALL	HEX_BYTE_OUT
	
	MOV	AL,CSP
	LEA	DI,ASSCII_SP
	CALL	HEX_BYTE_OUT
	
	MOV	AL,SR
	LEA	DI,ASSCII_SR
	CALL	HEX_BYTE_OUT
	
	MOV	AL,SR
	LEA	DI,ASSCII_SR_BIN
	MOV	AH,8
TR_10:
	SHL	AL,1
	JC	TR_20	
	
	MOV	BYTE PTR [DI],"0"
	JMP	TR_30
TR_20:
	MOV	BYTE PTR [DI],"1"
TR_30:
	INC	DI
	DEC	AH
	JNZ	TR_10
	
	
	
	CALL	DISASSEMBLE
	
	RET


DISASSEMBLE:

	XOR	DI,DI
DA_00:
	MOV	WORD PTR DISASS_TXT[DI],0
	INC	DI
	INC	DI
	CMP	DI,20*31
	JNE	DA_00

	MOV	SI,PC_ZEIGER
	LEA	DI,DISASS_TXT
	MOV	COUNTER,19
	MOV	ZEILE,0
DA_20:
	MOV	AX,SI						;** Adresse ausgeben **
	CALL	HEX_WORD_OUT
	INC	DI
	INC	DI
	
	PUSH	DI						;** Memory Dump des Aktuellen Befehls **
	XOR	BH,BH
	
	PUSH	ES DI SI
	MOV	DI,SI
	CALL	READ_BYTE
	MOV	BL,AL
	POP	SI DI ES
				
	SHL	BX,2
	MOV	BL,CPU_OPC[BX+3]
	MOV	OPC_TMP,BL
	AND	BL,11110000B
	SHR	BL,4
	XOR	BH,BH
	MOV	AL,OPC_LNG[BX]
	MOV	LNG_TMP,AL
	
	XOR	BX,BX
DA_10:
	
	PUSH	ES DI SI
	MOV	DI,SI
	ADD	DI,BX
	CALL	READ_BYTE
	POP	SI DI ES
	
	
	PUSH	BX
	CALL	HEX_BYTE_OUT
	POP	BX
	INC	DI
	INC	BX
	CMP	BL,LNG_TMP
	JNE	DA_10
	POP	DI
	
	ADD	DI,10						;** Mnemonic ausgeben **

	PUSH	ES DI SI
	MOV	DI,SI
	CALL	READ_BYTE
	MOV	BL,AL
	POP	SI DI ES

	XOR	BH,BH
	SHL	BX,2
	MOV	AL,CPU_OPC[BX]
	MOV	[DI],AL
	INC	DI
	MOV	AL,CPU_OPC[BX+1]
	MOV	[DI],AL
	INC	DI
	MOV	AL,CPU_OPC[BX+2]
	MOV	[DI],AL
	INC	DI

	PUSH	DI						;** Adressierung ausgeben **
	MOV	BL,OPC_TMP
	AND	BL,11110000B
	SHR	BL,3
	XOR	BH,BH
	MOV	BX,ADRESSIERUNGS_TBL[BX]
	CALL	BX
	POP	DI
	
	ADD	DI,10						;** anzahl der Zyklen ausgeben **
	MOV	AL,OPC_TMP				
	AND	AL,00000111B
	ADD	AL,48
	INC	AL
	MOV	[DI],AL
	ADD	DI,2
	
	MOV	AL,OPC_TMP					;** Illegal oder Legal ? **
	AND	AL,00001000B
	SHR	AL,2
	MOV	BX,ZEILE
	MOV	BYTE PTR F02_00[21+BX],AL

	MOVZX	AX,LNG_TMP
	ADD	SI,AX
	INC	ZEILE
	SUB	COUNTER,1
	JNC	DA_20
	RET
	
ADR0:								;** Implezied **
	RET
ADR1:								;** Unmittelbar **
	INC	DI
	MOV	WORD PTR [DI],"$#"
	INC	DI
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_BYTE
	POP	SI DI ES

	CALL	HEX_BYTE_OUT
	RET
ADR2:								;** Absolut **
	INC	DI
	MOV	BYTE PTR [DI],"$"
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_WORD
	POP	SI DI ES

	CALL	HEX_WORD_OUT
	RET
ADR3:								;** Zeropage **
	INC	DI
	MOV	BYTE PTR [DI],"$"
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_BYTE
	POP	SI DI ES

	CALL	HEX_BYTE_OUT
	RET
ADR4:								;** Absolut X Indexziert **
	INC	DI
	MOV	BYTE PTR [DI],"$"
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_WORD
	POP	SI DI ES

	CALL	HEX_WORD_OUT
	MOV	WORD PTR [DI],"X,"
	RET
ADR5:								;** Absolut Y Indexziert **
	INC	DI
	MOV	BYTE PTR [DI],"$"
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_WORD
	POP	SI DI ES

	CALL	HEX_WORD_OUT
	MOV	WORD PTR [DI],"Y,"
	RET
ADR6:								;** Zeropage X Indexziert **
	INC	DI
	MOV	BYTE PTR [DI],"$"
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_BYTE
	POP	SI DI ES

	CALL	HEX_BYTE_OUT
	MOV	WORD PTR [DI],"X,"
	RET
ADR7:								;** Indirekt X Indexziert **
	INC	DI
	MOV	WORD PTR [DI],"$("
	INC	DI
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_BYTE
	POP	SI DI ES

	CALL	HEX_BYTE_OUT
	MOV	BYTE PTR [DI],","
	INC	DI
	MOV	WORD PTR [DI],")X"
	RET
ADR8:								;** Indierkt Y Indexziert **
	INC	DI
	MOV	WORD PTR [DI],"$("
	INC	DI
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_BYTE
	POP	SI DI ES

	CALL	HEX_BYTE_OUT
	MOV	BYTE PTR [DI],")"
	INC	DI
	MOV	WORD PTR [DI],"Y,"
	RET
ADR9:	
	INC	DI							;** Relatiev **
	MOV	BYTE PTR [DI],"$"
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_BYTE
	POP	SI DI ES

	MOVZX	BX,AL
	AND	AL,10000000B
	JS	ADR9_10
	ADD	BX,SI
	MOV	AX,BX
	ADD	AX,2
	CALL	HEX_WORD_OUT
	RET
ADR9_10:	
	NEG	BL
	MOV	AX,SI
	SUB	AX,BX
	ADD	AX,2
	CALL	HEX_WORD_OUT
	RET
ADR10:								;** Indirekt **
	INC	DI
	MOV	WORD PTR [DI],"$("
	INC	DI
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_WORD
	POP	SI DI ES

	CALL	HEX_WORD_OUT
	MOV	BYTE PTR [DI],")"
	RET
ADR11:								;** Zerropage Y Indexziert **
	INC	DI
	MOV	BYTE PTR [DI],"$"
	INC	DI

	PUSH	ES DI SI
	MOV	DI,SI
	INC	DI
	CALL	READ_BYTE
	POP	SI DI ES

	CALL	HEX_BYTE_OUT
	MOV	WORD PTR [DI],"Y"
	RET
	
ASSEMBLE:
	RET

HEX_BYTE_OUT:		;*** Eingabe: DS:DI=Zielpuffer AL=8 Bit Wert ***

	XOR	BH,BH						;** Low Nibble aufspalten **
	MOV	BL,AL
	AND	BL,11110000B
	SHR	BX,4
	MOV	CL,HEX_TBL[BX]
	MOV	[DI],CL
	INC	DI
	
	XOR	BH,BH						;** Hi Nibble aufspalten **
	MOV	BL,AL
	AND	BL,00001111B
	MOV	CL,HEX_TBL[BX]
	MOV	[DI],CL
	INC	DI
	RET

HEX_WORD_OUT:							;*** Eingabe: DS:DI=Zielpuffer AX=16 Bit Wert ***
	MOV	DL,AL
	MOV	AL,AH
	CALL	HEX_BYTE_OUT
	MOV	AL,DL
	CALL	HEX_BYTE_OUT
	RET
	
ASSCII_TO_HEX:

	XOR	BX,BX
	MOV	AL,[DI]
	CALL	ASSCII_SEARCH
	JC	ATH_100
	
	MOV	BH,AL
	SHL	BH,4
	
	MOV	AL,[DI+1]
	CALL	ASSCII_SEARCH
	JC	ATH_100
	
	OR	BH,AL
	
	MOV	AL,[DI+2]
	CALL	ASSCII_SEARCH
	JC	ATH_100
	
	MOV	BL,AL
	SHL	BL,4
	
	MOV	AL,[DI+3]
	CALL	ASSCII_SEARCH
	JC	ATH_100
	
	OR	BL,AL
	
	MOV	AX,BX
	CLC
ATH_100:
	RET
	
ASSCII_SEARCH:
	XOR	SI,SI
AS_10:
	CMP	AL,ASSCII_TO_HEX_TBL[SI]
	JE	AS_20	
	INC	SI
	CMP	SI,32
	JNE	AS_10
	STC
	RET

;***************** D64 Inhaltsverzeichnis lesen ********************

READ_D64_DIR:
        
        MOV	TRACK,18				; *** 1. Diectory Block laden ***
	MOV	SEKTOR,0
        CALL    BLOCK_TO_PUFFER

	MOV	SI,0					; *** Diskname Invertieren ***
RDD_10:
        MOV     AH,BLOCKPUFFER[SI+90H]
	OR	AH,10000000B
	MOV	BYTE PTR F04_00[SI+10],AH
	INC	SI
	CMP	SI,23
	JNE	RDD_10
	MOV	BYTE PTR F04_00[SI+10],255
	
	
	
	
        MOV  	FS,FILE_PUFFER				; *** Directory des D64 Files einlesen ***
        MOV	DI,0
        MOV     CX,0
RDD_20:
        MOV     SI,0
        MOV     BX,0
        MOV     AX,WORD PTR BLOCKPUFFER                 ; *** Files auslesen ***
        MOV     WORD PTR TRACK,AX
        CMP     TRACK,0
        JE      RDD_50                                	; *** War letzter Block ***
        CALL    BLOCK_TO_PUFFER
RDD_30:
        MOV     AH,BLOCKPUFFER[SI+2]                    ; *** Filetype eintragen ***
        MOV     FS:[DI+17],AH
        CMP	AH,0
        JE	RDD_50

        MOV     AX,WORD PTR BLOCKPUFFER[SI+3]           ; *** Programmanfang eintragen ***
        MOV     FS:[DI+18],AX

        MOV     AX,WORD PTR BLOCKPUFFER[SI+30]          ; *** Programmlänge eintragen ***
        MOV     FS:[DI+20],AX

        MOV     BYTE PTR FS:[DI+16],255                 ; *** Makierung für File Ende eintragen ***

        PUSH    BX SI DI
        MOV     BX,0
        ADD     SI,5
RDD_40:
        MOV     AH,BLOCKPUFFER[SI]
        PUSH	DI
        MOVZX	DI,AH
        MOV	AH,ASCII_TO_POKE[DI]
        POP	DI             	 
        MOV     FS:[DI+BX],AH
        INC     SI
        INC     BX
        CMP     BX,16
        JNE     RDD_40
        POP     DI SI BX

        ADD     DI,22
        ADD     SI,32
        INC     BX
        INC     CX
        CMP     BX,8
        JNE     RDD_30
        JMP     RDD_20
RDD_50:
	MOV     FILE_ANZAHL,CX
	
	MOV	F04_04[8],0
	CMP	CX,24
	JG	RDD_60
	MOV	F04_04[10],243
	RET
RDD_60:
	SUB	CX,24
	MOV	AX,243
	SUB	AX,CX
	MOV	F04_04[10],AX
	MOV	PAGE_ZEIGER,0
	
	RET
	
;*************** USER OBJEKT zum Anzeigen des Auswahlobjekts ********************

VIEW_C64_AUSWAHL:
	
	PUSH	SI
	MOV	AX,[SI]
	ADD	AX,WINDOW_X
	MOV	BX,[SI+2]
	ADD	BX,WINDOW_Y
	MOV	CX,132
	MOV	DX,12
	MOV	SI,0
	CALL	GR_SET0_REC	
	POP	SI
	
	
	CMP	LOAD_OK,0
	JE	VCA_100
	
	MOV	AX,FILE_AUSWAHL
	XOR	DX,DX
	MOV	BX,22
	MUL	BX
	MOV	DI,AX
	MOV	GS,FILE_PUFFER
	
	MOV	FS,C64_ROM
	MOV	AX,[SI]
	ADD	AX,WINDOW_X
	ADD	AX,2
	MOV	CHAR_X,AX
	MOV	AX,[SI+2]
	ADD	AX,WINDOW_Y
	ADD	AX,2
	MOV	CHAR_Y,AX
	MOV	CHAR_COLOR,0
	MOV	CHAR_BACK_COLOR,1
	XOR	SI,SI
VCA_10:
	MOV	AL,GS:[DI]
	PUSH	SI DI
	MOV	SI,0D000H
	CALL	GR_SET_CHAR_FONT
	POP	DI SI
	ADD	CHAR_X,8
	INC	SI
	INC	DI
	CMP	SI,16
	JNE	VCA_10
	RET
VCA_100:
	MOV	FS,C64_ROM
	MOV	AX,[SI]
	ADD	AX,WINDOW_X
	ADD	AX,2
	MOV	CHAR_X,AX
	MOV	AX,[SI+2]
	ADD	AX,WINDOW_Y
	ADD	AX,2
	MOV	CHAR_Y,AX
	MOV	CHAR_COLOR,0
	MOV	CHAR_BACK_COLOR,1
	XOR	SI,SI
VCA_110:
	MOV	AL,32
	PUSH	SI DI
	MOV	SI,0D000H
	CALL	GR_SET_CHAR_FONT
	POP	DI SI
	ADD	CHAR_X,8
	INC	SI
	INC	DI
	CMP	SI,16
	JNE	VCA_110
	RET

;*************** USER OBJEKT zum Anzeigen eines C64 Image Namens ****************

VIEW_D64_NAME:

	MOV	FS,C64_ROM
	MOV	AX,[SI]
	ADD	AX,WINDOW_X
	MOV	CHAR_X,AX
	MOV	AX,[SI+2]
	ADD	AX,WINDOW_Y
	MOV	CHAR_Y,AX
	MOV	CHAR_COLOR,0
	MOV	CHAR_BACK_COLOR,1
VDN_10:
	MOV	AL,[SI+10]
	CMP	AL,255
	JE	VDN_20
	
	PUSH	SI
	MOV	SI,0D800H
	CALL	GR_SET_CHAR_FONT
	POP	SI
	INC	SI
	ADD	CHAR_X,8
	JMP	VDN_10
VDN_20:
	RET

;*************** USER OBJEKT zum Anzeigen der C64 Image Files ****************

VIEW_D64_DIR:
	PUSH	DI
	MOV	AX,[SI]
	ADD	AX,WINDOW_X
	MOV	BX,[SI+2]
	ADD	BX,WINDOW_y
	MOV	CX,165
	MOV	DX,242
	PUSH	SI
	MOV	SI,0
	CALL	GR_SET0_REC
	POP	SI
	
	MOV	FS,C64_ROM
	MOV	GS,FILE_PUFFER
	MOV	AX,[SI]
	ADD	AX,WINDOW_X
	ADD	AX,2
	MOV	CHAR_X,AX
	MOV	BX,AX
	MOV	AX,[SI+2]
	ADD	AX,WINDOW_Y
	ADD	AX,2
	MOV	CHAR_Y,AX
	MOV	CHAR_COLOR,0
	MOV	CHAR_BACK_COLOR,1
	XOR	SI,SI
	MOV	AX,PAGE_ZEIGER
	MOV	CL,22
	MUL	CL
	ADD	SI,AX
	MOV	DI,PAGE_ZEIGER
VDD_10:
	MOV	AL,GS:[SI]
	CMP	AL,255
	JE	VDD_15
	
	PUSH	SI DI BX
	MOV	SI,0D000H
	CALL	GR_SET_CHAR_FONT
	POP	BX DI SI
	INC	SI
	ADD	CHAR_X,8
	JMP	VDD_10
VDD_15:
	ADD	CHAR_X,8
	PUSH	BX
	MOV	BL,GS:[SI+1]
	AND	BL,00000111B
	XOR	BH,BH
	SHL	BX,1
	SHL	BX,1
	
	PUSH	SI DI
	
	MOV	SI,0D800H
	PUSH	BX SI
	MOV	AL,FILE_TYPE[BX]
	CALL	GR_SET_CHAR_FONT
	POP	SI BX
	ADD	CHAR_X,8
	PUSH	BX SI
	MOV	AL,FILE_TYPE[BX+1]
	CALL	GR_SET_CHAR_FONT
	POP	SI BX
	ADD	CHAR_X,8
	PUSH	BX SI
	MOV	AL,FILE_TYPE[BX+2]
	CALL	GR_SET_CHAR_FONT
	POP	SI BX
	ADD	CHAR_X,8
	
	
	POP	DI SI
	
	
	
	
	POP	BX
VDD_20:
	MOV	CHAR_X,BX
	ADD	CHAR_Y,10
	ADD	SI,6
	INC	DI
	CMP	DI,FILE_ANZAHL
	JE	VDD_30
	
	MOV	AX,24
	ADD	AX,PAGE_ZEIGER
	CMP	DI,AX
	JNE	VDD_10
VDD_30:
	POP	DI
	RET
;********************************************* Scrollt die C64 File Liste **************************************************

C64_FILE_SCROLL:
	MOV	AX,F04_04[8]
	MOV	PAGE_ZEIGER,AX
	MOV	AL,1
	LEA	DI,FENSTER_04
	CALL	INTU_REDRAW_OBJEKT
	RET
	
;******************************************* Bei Klick in C64 Programm auswahl *********************************************

C64_FILE_AUSWAHL:

	XOR	DX,DX
	MOV	AX,[SI+10]
	MOV	BX,10
	DIV	BX
	PUSH	AX
	ADD	AX,PAGE_ZEIGER
	MOV	CX,FILE_AUSWAHL
	MOV	FILE_AUSWAHL,AX
	POP	AX

	MOV	DX,FILE_AUSWAHL
	CMP	DX,FILE_ANZAHL
	JL	CFA_05
	
	MOV	FILE_AUSWAHL,CX
	
	JMP	CFA_30
CFA_05:
	MUL	BX
	MOV	BX,AX
	
	MOV	AX,[SI]
	ADD	AX,WINDOW_X
	ADD	BX,WINDOW_Y
	ADD	BX,[SI+2]
	MOV	CX,163
	MOV	DX,10
	MOV	SI,2
	CALL	GR_MAUS_AUS
	CALL	GR_SET0_REC
	CALL	GR_MAUS_AN
	
CFA_10:
	MOV	DI,MAUS_TASTEN
	AND	DI,1
	JNZ	CFA_10
	
	MOV	SI,1
	CALL	GR_MAUS_AUS
	CALL	GR_SET0_REC
	CALL	GR_MAUS_AN

	MOV	AX,FILE_AUSWAHL
	XOR	DX,DX
	MOV	BX,22
	MUL	BX
	MOV	BX,AX
	MOV	GS,FILE_PUFFER
	MOV	AH,GS:[BX+17]
	AND	AH,00000111B
	CMP	AH,2
	JNE	CFA_20	
	
	MOV	LOAD_OK,1
	JMP	CFA_30
CFA_20:
	MOV	LOAD_OK,0	
CFA_30:
	MOV	AL,6
	LEA	DI,FENSTER_04
	CALL	INTU_REDRAW_OBJEKT
	RET

;******************************************** Liest ein D64 Track **********************************************************

BLOCK_TO_PUFFER:


        PUSH    AX BX CX DX DI SI ES
        
        MOV  	AH,3DH					; *** D64 File öffnen ***
        MOV  	AL,11000000b
        LEA  	DX,D64_NAME
        INT  	21H
        MOV  	D64_HANDLE,AX
	
	MOVZX	SI,TRACK
	SHL	SI,1				; *** Mal 2 ***
	MOV	AX,TRACK_INDEX[SI]
	MOVZX	BX,SEKTOR			; ***
	ADD	AX,BX				; ***
	MOV	OFFSET_LO,AX
        MOV     OFFSET_HI,0
        MOV     CL,8
        ROL     DWORD PTR OFFSET_HI,CL          ; *** Mal 256 ***

        MOV     AH,42H                          ; *** Zeiger auf Block stellen ***
	MOV	AL,0
	MOV	BX,D64_HANDLE
        MOV     CX,OFFSET_HI
        MOV     DX,OFFSET_LO
	INT	21H

        MOV     AH,3FH                          ; *** Block lesen ***
	MOV	BX,D64_HANDLE
        MOV     CX,256
        LEA     DX,BLOCKPUFFER
        INT     21H

        MOV	BX,D64_HANDLE		; D64 schließen
	MOV	AH,3EH	
	INT	21H
        
        POP     ES SI DI DX CX BX AX
	RET
	
;*********************************** Lädt ein C64 Programm in den C64 Speicher und fürt ein Start aus **********************	

LOAD_RUN_C64:
	CMP	LOAD_OK,1
	JE	LR_10
	RET
LR_10:

	MOV	AX,X
	SHR	AX,1
	SUB	AX,85
	MOV	BX,Y
	SHR	BX,1
	SUB	BX,45
	
	MOV	WORD PTR FENSTER_05[1],AX
	MOV	WORD PTR FENSTER_05[3],BX
		
	LEA	DI,FENSTER_05
	CALL	INTU_OPEN_WINDOW
	
	PUSH	ES
	CALL	RESET_1
	POP	ES
	MOV	FS,C64_RAM
	MOV	BYTE PTR FS:08004H,0
	PUSH	ES
	OR	FLAGS_1,4
LR_20:
	CALL	CPU_6510
	CMP	PC,0E5CDH
	JNE	LR_20
	
	
	
	MOV	BX,22
	MOV	AX,FILE_AUSWAHL
	MUL	BX
	MOV	BX,AX
	MOV	FS,FILE_PUFFER

	MOV	AX,WORD PTR FS:[BX+18]			; *** ersten Block lesen ***
	MOV     WORD PTR TRACK,AX
	CALL	BLOCK_TO_PUFFER
	MOV	AX,WORD PTR FS:[BX+20]			; *** Programmgröße eintragen ***
	MOV	BLOCK_ZÄHLER,AX	

	MOV     AX,WORD PTR BLOCKPUFFER                 ; *** Nächsten Track/Sektor eintragen ***
        MOV     WORD PTR TRACK,AX
	
	MOV	SI,WORD PTR BLOCKPUFFER[2]		; *** Startadresse ermitteln ***
	MOV	START_ADR,SI
	
	
	
	CMP	START_ADR,0801H
	JNE	LR_30
	
	MOV	ES,C64_RAM
	MOV	WORD PTR ES:[0277H],"UR"
	MOV	BYTE PTR ES:[0279H],"N"
	MOV	BYTE PTR ES:[027AH],13
	MOV	BYTE PTR ES:[0C6H],4
	JMP	LR_40
LR_30:
	MOV	ES,C64_RAM
	MOV	WORD PTR ES:[0277H],"YS"
	MOV	WORD PTR ES:[0279H]," S"
	
	MOV	AX,START_ADR
	MOV	SI,0
	
	XOR	DX,DX
	MOV	BX,10000
	DIV	BX
	
	ADD	AL,48
	MOV	ES:[027BH+SI],AL
	INC	SI
	
	MOV	AX,DX
	XOR	DX,DX	
	MOV	BX,1000
	DIV	BX
	
	ADD	AL,48
	MOV	ES:[027BH+SI],AL
	INC	SI
	
	MOV	AX,DX
	XOR	DX,DX	
	MOV	BX,100
	DIV	BX
	
	ADD	AL,48
	MOV	ES:[027BH+SI],AL
	INC	SI
		
	MOV	AX,DX
	XOR	DX,DX	
	MOV	BX,10
	DIV	BX
	
	ADD	AL,48
	MOV	ES:[027BH+SI],AL
	INC	SI
	
	MOV	AX,DX
	XOR	DX,DX	
	MOV	BX,1
	DIV	BX
	
	ADD	AL,48
	MOV	ES:[027BH+SI],AL
	INC	SI
	MOV	BYTE PTR ES:[0C6H],9
LR_40:
	POP	ES
	AND	FLAGS_1,1111111111111011B
	
	MOV	AL,05
	CALL	INTU_CLOSE_WINDOW
	
	CALL	LOAD_C64
	RET
	
;****************************************** Lädt ein C64 Programm in den C64 Speicher ein **********************************
	
LOAD_C64:	
	CMP	LOAD_OK,1
	JE	L_10
	RET
L_10:
	PUSH	ES
	MOV	BX,22
	MOV	AX,FILE_AUSWAHL
	MUL	BX
	MOV	BX,AX
	MOV	FS,FILE_PUFFER

	MOV	AX,WORD PTR FS:[BX+18]			; *** ersten Block lesen ***
	MOV     WORD PTR TRACK,AX
	CALL	BLOCK_TO_PUFFER
	MOV	AX,WORD PTR FS:[BX+20]			; *** Programmgröße eintragen ***
	MOV	BLOCK_ZÄHLER,AX	

	MOV     AX,WORD PTR BLOCKPUFFER                 ; *** Nächsten Track/Sektor eintragen ***
        MOV     WORD PTR TRACK,AX
	
	MOV	SI,WORD PTR BLOCKPUFFER[2]		; *** Startadresse ermitteln ***
	MOV	START_ADR,SI
	MOV	ES,C64_RAM
	
	MOV	DI,4	
							; *** 1.Block in C64 Speicher laden ***
	DEC	BLOCK_ZÄHLER
	JZ	GBO_410
GBO_370:
	MOV	AH,BLOCKPUFFER[DI]
	MOV	ES:[SI],AH
	
	INC	SI
	INC	DI
	CMP	DI,256
	JNE	GBO_370
GBO_380:	
	CALL	BLOCK_TO_PUFFER				; *** nächsten Block holen ***
	MOV     AX,WORD PTR BLOCKPUFFER                 ; *** Nächsten Track/Sektor eintragen ***
        MOV     WORD PTR TRACK,AX
	
	MOV	DI,2
	
	DEC	BLOCK_ZÄHLER
	JZ	GBO_410
							; *** Block in C64 Speicher laden ***
GBO_390:
	MOV	AH,BLOCKPUFFER[DI]
	MOV	ES:[SI],AH
	
	INC	SI
	INC	DI
	CMP	DI,256
	JNE	GBO_390
	JMP	GBO_380
GBO_410:
	MOV	BL,BLOCKPUFFER[0]
	MOV	BL,253
	MOV	DI,2
GBO_420:
	MOV	AH,BLOCKPUFFER[DI]
	MOV	ES:[SI],AH
	
	INC	SI
	INC	DI
	DEC	BL
	JNZ	GBO_420
GBO_430:
	INC	SI
	MOV	END_ADR,SI
	
	MOV	ES,C64_RAM
	MOV	AX,START_ADR
	MOV	ES:[02BH],AL
	MOV	ES:[02CH],AH
	MOV	AX,END_ADR
	MOV	ES:[02DH],AL
	MOV	ES:[02EH],AH	
	MOV	ES:[0AEH],AL
	MOV	ES:[0AFH],AH
	POP	ES
	
	JMP	RUN_C64
END