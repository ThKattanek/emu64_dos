;****************************************
;*					*
;* Titel: CIA1-Emulation (für Emu64)	*
;* Autor: Thorsten Kattanek		*
;* Datum: 1.7.1998			*
;* Ort  : Berlin			*
;* Vers : 1.0				*
;* Info : Hier wird die CIA 1 emuliert	*
;*	  also Timer unsw.		*
;*					*
;****************************************

EXTRN ZYKLEN:BYTE,I_FLAGS:BYTE,CHECK_KEY:NEAR,C64_RAM:WORD,LP:BYTE

PUBLIC	COUNT_TIMER_A,TIMER_A_LATCH_LO,TIMER_A_LATCH_HI,TASTATUR,C64_TASTEN_1,C64_TASTEN_2,CIA1_REG_READ,CIA1_REG_WRITE
PUBLIC	JOYSTICKS
.MODEL SMALL
.DATA




;****************************************

	TIMER_A_LATCH_HI	DB 040H
	TIMER_A_LATCH_LO	DB 025H	
	TIMER_B_LATCH	DW	?
	TIMER_A_COUNTER	DW	0
	TIMER_B_COUNTER	DW	0
	ZÄHLER		DW	0
	CONTROL_A	DB	0
	INT_MASK	DB	0


;******** Gehört zur Tasten Belegung **********

	C64_TASTEN_1	DB 00000000B
			DB 00000000B
			DB 00000000B
			DB 00000000B
			DB 00000000B
			DB 00000000B
			DB 00000000B
			DB 00000000B
	C64_TASTEN_2	DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
	KEY_PC_C64	DB 255,255,70H,73H,10H,13H,20H,23H,30H,33H,40H,43H,55H,62H,00H,77H,76H,11H,16H,21H
			DB 26H,14H,36H,41H,46H,51H,255,255,01H,72H,12H,15H,22H,25H,32H,35H,42H,45H,52H,56H
			DB 60H,63H,255,65H,31H,27H,24H,37H,34H,47H,44H,57H,54H,67H,255,61H,75H,74H,255,04H,05H
			DB 06H,03H,255,255,255,255,255,255,255,255,255,255,255,053H,255,255,255,50H,255,255
			DB 255,255,71H,45 DUP (255)
	
;****************************************
.486
.CODE

COUNT_TIMER_A:
	
	MOV	AH,CONTROL_A
	AND	AH,1
	JZ	L030
	
	DEC	TIMER_A_COUNTER
	JZ	L010
	JMP	L030
L010:
	MOV	AH,INT_MASK
	AND	AH,1
	JZ	L020
	OR	I_FLAGS,00000010B		; *** Timer Interrupt IRQ auslösen ***
L020:
	MOV	AX,WORD PTR TIMER_A_LATCH_HI
	MOV	TIMER_A_COUNTER,AX
L030:
	DEC	ZÄHLER
	JNZ	L040
	CALL	CHECK_KEY
L040:
	RET

;********* CIA1 REGISTER LESEN *********

CIA1_REG_READ:
	
CRR_10:
	;CMP	DI,0DC01H
	;JNE	CRR_20
	
	;MOV	AL,0EFH
	;RET
CRR_20:
	MOV	ES,C64_RAM
	MOVZX	AX,ES:[DI]
	RET

;********* CIA1 REGISTER SCHREIBEN *****

CIA1_REG_WRITE:

	CMP	DI,0DC00H
	JNE	CRW_05
	CALL	TASTATUR
CRW_05:
	CMP	DI,0DC03H
	JNE	CRW_10
	AND	AL,00010000B
	MOV	CL,4
	ROR	AL,CL
	MOV	LP,AL
	RET	

CRW_10:
	CMP	DI,0DC04H
	JNE	CRW_20
	MOV	TIMER_A_LATCH_HI,AL
	RET
CRW_20:
	CMP	DI,0DC05H
	JNE	CRW_30
	MOV	TIMER_A_LATCH_LO,AL
	RET
CRW_30:
	CMP	DI,0DC0EH
	JNE	CRW_40
	MOV	CONTROL_A,AL
	RET
CRW_40:
	CMP	DI,0DC0DH
	JNE	CRW_50
	MOV	AH,AL
	AND	AH,10000000B
	JZ	CRW_45
	OR	INT_MASK,AL
	RET
CRW_45:
	MOV	INT_MASK,0
CRW_50:
	RET

;********* Diese Routiene holt eine PC Taste und Trägt sie in die C64 Matrix und setzt die CIA Register ********
;***************** wird nur ausgefürt wenn ein Leszugriff auf I/O $DC01 *****************

TASTATUR:
	IN	AX,060H
	CMP	AL,0FAH
	JNE	TASTATUR_00
	OR	C64_TASTEN_1[6],00010000B	; Shift recht setzen
TASTATUR_00:
	CMP	AL,0AAH
	JNE	TASTATUR_10
	AND	C64_TASTEN_1[6],11101111B	; Shift rechts löschen
TASTATUR_10:
	CMP	AL,0B6H
	JNE	TASTATUR_20
	AND	C64_TASTEN_1[6],11101111B	; Shift rechts löschen
TASTATUR_20:
	CMP	AL,50H
	JNE	TASTATUR_30
	OR	C64_TASTEN_1[0],10000000B	; Cursor runter
TASTATUR_30:
	CMP	AL,0D0H
	JNE	TASTATUR_40
	AND	C64_TASTEN_1[0],01111111B
TASTATUR_40:
	CMP	AL,04DH
	JNE	TASTATUR_50
	OR	C64_TASTEN_1[0],00000100B	; Cursor rechts
TASTATUR_50:
	CMP	AL,0CDH
	JNE	TASTATUR_60
	AND	C64_TASTEN_1[0],11111011B
TASTATUR_60:
	CMP	AL,048H
	JNE	TASTATUR_70
	OR	C64_TASTEN_1[0],10000000B	; Cursor runter und Shift = Cursor hoch
	OR	C64_TASTEN_1[1],10000000B
TASTATUR_70:
	CMP	AL,0C8H
	JNE	TASTATUR_80
	AND	C64_TASTEN_1[0],01111111B
	AND	C64_TASTEN_1[1],01111111B
TASTATUR_80:
	CMP	AL,04BH
	JNE	TASTATUR_90
	OR	C64_TASTEN_1[0],00000100B	; Cursor rechts und Shift = Cursor links
	OR	C64_TASTEN_1[1],10000000B
TASTATUR_90:
	CMP	AL,0CBH
	JNE	TASTATUR_100
	AND	C64_TASTEN_1[0],11111011B
	AND	C64_TASTEN_1[1],01111111B
TASTATUR_100:

	AND	AL,AL
	JS	TASTATUR_110			; Springe wenn Bit 7 gesetzt ist also Bit löschen
	XOR	AH,AH
	MOV	DI,AX
	MOV	BL,KEY_PC_C64[DI]
	AND	BL,BL
	JS	TASTATUR_120			; wenn Bit 7 gestzt dann keine C64 Taste
	MOV	CL,BL
	AND	CL,00000111B
	MOV	AL,00000001B
	ROL	AL,CL
	AND	BL,01110000B
	MOV	CL,4
	ROR	BL,CL
	XOR	BH,BH
	MOV	DI,BX
	OR	C64_TASTEN_1[DI],AL
	JMP	TASTATUR_120

TASTATUR_110:

	AND	AL,01111111B
	XOR	AH,AH
	MOV	DI,AX
	MOV	BL,KEY_PC_C64[DI]
	AND	BL,BL
	JS	TASTATUR_120			; wenn Bit 7 gestzt dann keine C64 Taste
	MOV	CL,BL
	AND	CL,00000111B
	MOV	AL,11111110B
	ROL	AL,CL
	AND	BL,01110000B
	MOV	CL,4
	ROR	BL,CL
	XOR	BH,BH
	MOV	DI,BX
	AND	C64_TASTEN_1[DI],AL

TASTATUR_120:

	MOV	ES,C64_RAM
	MOV	AL,ES:0DC00H
	MOV	DI,0

TASTATUR_130:

	SHR	AL,1
	JC	TASTATUR_140				; Springe wenn 1
	MOV	AH,C64_TASTEN_1[DI]
	MOV	C64_TASTEN_2[DI],AH
	JMP	TASTATUR_150
TASTATUR_140:
	MOV	C64_TASTEN_2[DI],0
TASTATUR_150:
	INC	DI
	CMP	DI,8
	JNE	TASTATUR_130

	MOV	AL,0
	MOV	DI,0
TASTATUR_160:
	OR	AL,C64_TASTEN_2[DI]
	INC	DI
	CMP	DI,8
	JNE	TASTATUR_160
	NOT	AL
	MOV	BYTE PTR ES:0DC01H,AL
	MOV	AH,1
	INT	16H
	JZ	TASTATUR_170
	MOV	AH,0
	INT	16H
TASTATUR_170:
	;RET
JOYSTICKS:
	MOV	ES,C64_RAM
	MOV	AH,84H
	MOV	DX,00H
	INT	15H

	AND	AL,00010000B
	CMP	AL,0
	JNE	JOYSTICK_10

	MOV	AL,BYTE PTR ES:0DC01H
	AND	AL,11101111B
	MOV	BYTE PTR ES:0DC01H,AL

	MOV	AL,BYTE PTR ES:0DC00H
	AND	AL,11101111B
	MOV	BYTE PTR ES:0DC00H,AL
JOYSTICK_10:
	RET
;****************************************
END