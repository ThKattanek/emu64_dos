;****************************************
;*					*
;* Titel: SID-Emulation DSP (für Emu64)	*
;* Autor: Thorsten Kattanek		*
;* Datum: 03.05.1999			*
;* Ort  : Berlin			*
;* Vers : 1.0				*
;* Info : Hier wird der SID emuliert	*
;*	  also Sound.			*
;*	  		 		*
;****************************************

PUBLIC	SOUND_RESET,SID,SID_RESET,R1_10,R8_10,R15_10,FREQUENZ1,FREQUENZ2,FREQUENZ3,VOLUME,DSP_AN,DSP_AUS
EXTRN	DSP_PUFFER:WORD

.MODEL SMALL
.DATA

;****************************************
	
	SB_PORT		DW 220H
	DSP_PHYS_LO	DW 0
	DSP_PHYS_HI	DW 0
	
	SPRUNGTABELLE	DW R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28
	
	FLIP			DB 0
	STIMME1_ADSR		DB 0				;** Bit 0=Key Bit **
	STIMME2_ADSR		DB 0
	STIMME3_ADSR		DB 0
	VOLUME			DB 0

	FREQUENZ		DD 0
	
	FREQUENZ1		DW 0
				DW 0
	FREQUENZ2		DW 0
				DW 0
	FREQUENZ3		DW 0
				DW 0
				
	ATTACK_COUNTER1		DW 0
	ATTACK_TIME1		DW 0
	ATTACK_COUNTER2		DW 0
	ATTACK_TIME2		DW 0
	ATTACK_COUNTER3		DW 0
	ATTACK_TIME3		DW 0
	
	RELAISE_COUNTER1	DW 0
	RELAISE_TIME1		DW 0
	RELAISE_COUNTER2	DW 0
	RELAISE_TIME2		DW 0
	RELAISE_COUNTER3	DW 0
	RELAISE_TIME3		DW 0
	
	ATTACK_TBL		DW 1,4,8,12,19,28,34,40,50,125,250,400,500,1500,2500,4000
	DEC_REL_TBL		DW 3,12,24,36,57,84,102,120,150,375,750,1200,1500,4500,7500,12000
	
	VOL_TABLE		DB 256*16 DUP(0)
	MIX_PUFFER		DB 100 DUP(0)
	STIMME1			DB 200 DUP(0)
	STIMME2			DB 200 DUP(0)
	STIMME3			DB 200 DUP(0)
	
	SAMPLING_FREQ		DW 22000
	WAVE_RESULT		DW 0FFH
	OBERGRENZE		DW 0FFH
	UNTERGRENZE		DW 000H
			
	WERT1			DD 0
	UMRECHNUNGS_FAKTOR	DD 4186343FH	;** Real 16,77 **
	FAKTOR_2		DW 2
	
	OP			DW 0
	OP1			DD 0
	OP2			DD 0
	OP3			DD 0
	ENV1			DB 0
	ENV2			DB 0
	ENV3			DB 0
	SÄGEZAHN_KONSTANTE1	DD 0
	SÄGEZAHN_KONSTANTE2	DD 0
	SÄGEZAHN_KONSTANTE3	DD 0
	DREIECK_KONSTANTE1	DD 0
	DREIECK_KONSTANTE2	DD 0
	DREIECK_KONSTANTE3	DD 0
	
	TST			DD 0
	
	
;****************************************
.486
.CODE

SID:
	SUB	DI,0D400H			; *** Registernr errechnen ***
	SAL	DI,1
	MOV	BX,SPRUNGTABELLE[DI]
	JMP	BX				; *** zum gewünschten Register springen ***

SID_RESET:
	XOR	DI,DI
SR_10:
	MOV	AL,0
	MOV	SI,DI
	SHL	SI,1
	MOV	BX,SPRUNGTABELLE[SI]
	PUSH	AX DI
	CALL	BX
	POP	DI AX
	INC	DI
	CMP	DI,29
	JNE	SR_10
	RET

;********* Hier sind alle Register des SID aufgeführt **********

;********* Oszillatorfrequenz niederwertiges Byte für Stimme 1 *********

R0:
	MOV	BYTE PTR FREQUENZ1[0],AL
	JMP	R1_10
	RET

;********** Oszillatorfrequenz höherwertiges Byte für Stimme 1 ********

R1:
	MOV	BYTE PTR FREQUENZ1[1],AL
R1_10:
	FILD	DWORD PTR FREQUENZ1
	FDIV	UMRECHNUNGS_FAKTOR
	FSTP	FREQUENZ

	FLD	WERT1
	FLD	FREQUENZ
	FABS
	FDIV
	FLD1
	FDIVR
	FST	SÄGEZAHN_KONSTANTE1
	FIMUL	FAKTOR_2
	FSTP	DREIECK_KONSTANTE1
	RET
R2:
	RET
R3:
	RET

;********** Steuerregister der Stimme 1 **********

R4:
	AND	AL,00000001B
	AND	STIMME1_ADSR,11111110B
	OR	STIMME1_ADSR,AL
	RET

;********** Attack/Decay Stimme 1 **********

R5:
	MOVZX	BX,AL
	AND	BL,11110000B
	MOV	CL,3
	SHR	BX,CL
	MOV	CX,ATTACK_TBL[BX]
	MOV	ATTACK_TIME1,CX
	MOV	ATTACK_COUNTER1,CX
	RET

;********** Sustain/Release Stimme 1 **********

R6:
	MOVZX	BX,AL
	AND	BL,00001111B
	SHL	BX,1
	MOV	CX,DEC_REL_TBL[BX]
	MOV	RELAISE_TIME1,CX
	MOV	RELAISE_COUNTER1,CX
	RET

;********* Oszillatorfrequenz niederwertiges Byte für Stimme 2 *********

R7:
	MOV	BYTE PTR FREQUENZ2[0],AL
	JMP	R8_10
	RET

;********** Oszillatorfrequenz höherwertiges Byte für Stimme 2 ********

R8:
	MOV	BYTE PTR FREQUENZ2[1],AL
R8_10:
	FILD	DWORD PTR FREQUENZ2
	FDIV	UMRECHNUNGS_FAKTOR
	FSTP	FREQUENZ
	
	FLD	WERT1
	FLD	FREQUENZ
	FABS
	FDIV
	FLD1
	FDIVR
	FST	SÄGEZAHN_KONSTANTE2
	FIMUL	FAKTOR_2
	FSTP	DREIECK_KONSTANTE2
	RET
R9:
	RET
R10:
	RET

;********** Steuerregister der Stimme 2 **********

R11:
	AND	AL,00000001B
	AND	STIMME2_ADSR,11111110B
	OR	STIMME2_ADSR,AL
	RET

;********** Attack/Decay Stimme 2 **********

R12:
	MOVZX	BX,AL
	AND	BL,11110000B
	MOV	CL,3
	SHR	BX,CL
	MOV	CX,ATTACK_TBL[BX]
	MOV	ATTACK_TIME2,CX
	MOV	ATTACK_COUNTER2,CX
	RET

;********** Sustain/Release Stimme 2 **********

R13:
	MOVZX	BX,AL
	AND	BL,00001111B
	SHL	BX,1
	MOV	CX,DEC_REL_TBL[BX]
	MOV	RELAISE_TIME2,CX
	MOV	RELAISE_COUNTER2,CX
	RET

;********* Oszillatorfrequenz niederwertiges Byte für Stimme 3 *********

R14:
	MOV	BYTE PTR FREQUENZ3[0],AL
	JMP	R15_10
	RET

;********** Oszillatorfrequenz höherwertiges Byte für Stimme 3 ********

R15:
	MOV	BYTE PTR FREQUENZ3[1],AL
R15_10:
	FILD	DWORD PTR FREQUENZ3	
	FDIV	UMRECHNUNGS_FAKTOR
	FSTP	FREQUENZ
	
	FLD	WERT1
	FLD	FREQUENZ
	FABS
	FDIV
	FLD1
	FDIVR
	FST	SÄGEZAHN_KONSTANTE3
	FIMUL	FAKTOR_2
	FSTP	DREIECK_KONSTANTE3
	RET
R16:
	RET
R17:
	RET

;********** Steuerregister der Stimme 3 **********

R18:
	AND	AL,00000001B
	AND	STIMME3_ADSR,11111110B
	OR	STIMME3_ADSR,AL
	RET

;********** Attack/Decay Stimme 3 **********

R19:
	MOVZX	BX,AL
	AND	BL,11110000B
	MOV	CL,3
	SHR	BX,CL
	MOV	CX,ATTACK_TBL[BX]
	MOV	ATTACK_TIME3,CX
	MOV	ATTACK_COUNTER3,CX
	RET

;********** Sustain/Release Stimme 3 **********

R20:
	MOVZX	BX,AL
	AND	BL,00001111B
	SHL	BX,1
	MOV	CX,DEC_REL_TBL[BX]
	MOV	RELAISE_TIME3,CX
	MOV	RELAISE_COUNTER3,CX
	RET

R21:
	RET
R22:
	RET
R23:
	RET

;********** Mode/Gesamtlautstärke ***********

R24:
	MOV	VOLUME,AL
	AND	VOLUME,00001111B
	RET
R25:
	RET
R26:
	RET
R27:
	RET
R28:
	RET




;********** DSP-Chip Funktionen *********

SOUND_RESET:

	FILD	SAMPLING_FREQ
	FILD	WAVE_RESULT
	FDIV
	FSTP	WERT1
	
	MOV	AL,0				;** Volumen Tabelle erstellen (Hier sind alle Werte von 0-255 für alle Lautstärken) **
	MOV	VOLUME,0
SR_1:
	PUSH	AX
	MUL	VOLUME					
	MOV	BH,15
	DIV	BH	
	MOV	CL,AL
	POP	AX
	
	MOV	BL,AL
	MOV	BH,VOLUME
	MOV	VOL_TABLE[BX],CL
	
	INC	AL
	JNZ	SR_1
	
	INC	VOLUME
	CMP	VOLUME,16
	JNE	SR_1
	
	
	

	MOV	DX,SB_PORT
	ADD	DL,6
	MOV	AL,1
	OUT	DX,AL
	
	SUB	AL,AL
LOOP_1:	DEC	AL
	JNE	LOOP_1
	
	OUT	DX,AL
	
	XOR	CX,CX
	ADD	DL,8
LOOP_2:	IN	AL,DX
	TEST	AL,80H
	JNE	DSP_FOUND
	LOOP	LOOP_2
	JMP	KEIN_DSP
	
DSP_FOUND:
	
	SUB	DL,4
	IN	AL,DX
	CMP	AL,0AAH
	JNE	KEIN_DSP
		
	MOV	AH,0D1H			; Lautsprecher anschalten
	CALL	WRITE_DSP
	
	MOV	AH,0A0H			; Mono Einstellen
	CALL	WRITE_DSP
	
	MOV	AH,40H			; Samplefrequenz Einstellen ( 22000 HZ )
	CALL	WRITE_DSP
	MOV	AH,0D2H
	CALL	WRITE_DSP
	
	MOV	AH,48H			; Transferlänge Einstellen ( 3 Byte = Wert 2 )
	CALL	WRITE_DSP
	MOV	AH,063H			; LO
	CALL	WRITE_DSP
	MOV	AH,00H			; HI
	CALL	WRITE_DSP
	
	;************ DMA *************
	
	MOV	ES,DSP_PUFFER
	MOV	DI,DI
L100:
	MOV	BYTE PTR ES:[DI],0
	INC	DI	
	CMP	DI,512
	JNE	L100
		
	MOVZX	EAX,DSP_PUFFER		; Puffersegmentadrese * 16
	MOV	CL,4
	SHL	EAX,CL
	
	MOV	DWORD PTR DSP_PHYS_LO,EAX
	
	MOV	BX,DSP_PHYS_LO
	
	MOV	DX,02H			; Startadresse für DMA 1
	MOV	AL,BL
	OUT	0cH,AL
	OUT	DX,AL
	MOV	AL,BH
	OUT	DX,AL
	
	MOV	BX,DSP_PHYS_HI
	
	MOV	DX,83H			; DMA Page Register für DMA 1
	MOV	AL,BL
	OUT	DX,AL
	
	MOV	DX,03H			; Transferlänge für DMA 1
	MOV	AL,0C7H
	OUT	0CH,AL
	OUT	DX,AL
	MOV	AL,00H
	OUT	DX,AL
	
	MOV	AL,00000000B	
	OUT	0FH,AL
	
	MOV	AL,10011001B		; Mode Register für DMA 1
	OUT	0BH,AL
	
	;*******************************
	
	;************ IRQ **************
	
	MOV	AH,25H			; Hardware Interrupt 7H(0FH) 5H(0DH) auf eigenen IRQ Handle
	MOV	AL,0FH
	PUSH	DS
	PUSH	CS
	POP	DS
	LEA	DX,IRQ
	INT	21H
	POP	DS
	
	MOV	AL,10
	OUT	70H,AL
	IN	AL,71H
	AND	AL,11110000B
	MOV	AH,AL
	MOV	AL,10
	OUT	70H,AL
	MOV	AL,AH
	OUT	71H,AL
	
	MOV	AL,11
	OUT	70H,AL
	IN	AL,71H
	OR	AL,01000000B
	MOV	AH,AL
	MOV	AL,11
	OUT	70H,AL
	MOV	AL,AH
	OUT	71H,AL
	
	MOV	AL,00H			; Interrupt Controller alle IRQ´s auf Master freigeben
	OUT	21H,AL
	
	MOV	AL,00H			; Interrupt Controller alle IRQ´s auf Slave freigeben
	OUT	0A1H,AL
	
	;********************************

	STC
	RET	
	
KEIN_DSP:
	RET
	
WRITE_DSP:
	PUSH	AX 
	MOV	DX,SB_PORT
	ADD	DL,0CH
WARTEN:	IN	AL,DX
	TEST	AL,80H
	JNE	WARTEN
	
	MOV	AL,AH
	OUT	DX,AL
	POP	AX
	RET
	
READ_DSP:

	MOV	DX,SB_PORT
	ADD	DL,0EH
WARTEN1:IN	AL,DX
	TEST	AL,80H
	JE	WARTEN1
	
	SUB	DL,4
	IN	AL,DX
	RET
	
DSP_AN:
	MOV	AH,1CH			; DSP Auto Init DMA starten
	CALL	WRITE_DSP
	MOV	FLIP,0
	RET
DSP_AUS:
	MOV	AH,0DAH			; DSP Auto Init DMA starten
	CALL	WRITE_DSP
	RET
	
;*********** IRQ HANDLE (SID Oszilloskator und ADSR Emulation mit 22000 HZ 8 Bit und Mono) ************

IRQ:	
	PUSH	AX BX CX DX SI DI DS ES
	
	MOV	DX,@DATA
	MOV	DS,DX
	MOV	ES,DSP_PUFFER
	
	CALL	INIT_MIX_PUFFER
	
	XOR	DI,DI
	NOT	FLIP
	CMP	FLIP,0
	JE	IRQ_20	
IRQ_10:
	MOV	AL,MIX_PUFFER[DI]
	MOV	ES:[DI],AL
	INC	DI
	CMP	DI,100
	JNE	IRQ_10
	JMP	IRQ_30
IRQ_20:
	MOV	AL,MIX_PUFFER[DI]
	MOV	ES:[DI+100],AL
	INC	DI
	CMP	DI,100
	JNE	IRQ_20
IRQ_30:	
	MOV	DX,220H				; DSP IRQ Bestätigen
	ADD	DL,14
	IN	AL,DX
	
	MOV	AL,20H				; EOI von SLAVE senden
	OUT	0A0H,AL
	MOV	AH,AL
	OUT	20H,AL
	
	POP	ES DS DI SI DX CX BX AX
	
	IRET


INIT_MIX_PUFFER:
	XOR	DI,DI
	FILD	OBERGRENZE
	FLD	OP1
IMP_10:
	FADD	SÄGEZAHN_KONSTANTE1
	CALL	OSZILLATOR
	CALL	ENVELOOP1

	MOV	STIMME1[DI],AL
	INC	DI
	INC	DI
	CMP	DI,200
	JNE	IMP_10
	FSTP	OP1
	FISTP	TST
	
	XOR	DI,DI
	FILD	OBERGRENZE
	FLD	OP2
IMP_20:
	FADD	SÄGEZAHN_KONSTANTE2
	CALL	OSZILLATOR
	CALL	ENVELOOP2

	MOV	STIMME2[DI],AL
	INC	DI
	INC	DI
	CMP	DI,200
	JNE	IMP_20
	FSTP	OP2
	FISTP	TST
	
	XOR	DI,DI
	FILD	OBERGRENZE
	FLD	OP3
IMP_30:
	FADD	SÄGEZAHN_KONSTANTE3
	CALL	OSZILLATOR
	CALL	ENVELOOP3

	MOV	STIMME3[DI],AL
	INC	DI
	INC	DI
	CMP	DI,200
	JNE	IMP_30
	FSTP	OP3
	FISTP	TST

	XOR	DI,DI
	XOR	SI,SI
IMP_80:
	MOV	AX,WORD PTR STIMME1[DI]
	ADD	AX,WORD PTR STIMME2[DI]
	ADD	AX,WORD PTR STIMME3[DI]
	
	MOV	BL,3
	DIV	BL
	
	MOV	BL,AL						;*** Gesamtlautstärke Aufmodelieren ***
	MOV	BH,VOLUME
	MOV	AL,VOL_TABLE[BX]

	MOV	MIX_PUFFER[SI],AL
	INC	SI
	INC	DI
	INC	DI
	CMP	DI,200
	JNE	IMP_80
	RET
	
OSZILLATOR:
	
WBG_10:
	FCOM
	FSTSW	AX
	SAHF
	JB	WBG_20
	
	FISUB	OBERGRENZE
	FIADD	UNTERGRENZE
WBG_20:
	FIST	OP
	MOV	AL,BYTE PTR OP[0]
	RET
	
ENVELOOP1:
	MOV	BL,STIMME1_ADSR
	AND	BL,00000001B
	JNZ	E1_10
	
	MUL	ENV1
	MOV	BL,44
	DIV	BL
	
	CMP	ENV1,0
	JE	E1_20
	
	DEC	RELAISE_COUNTER1
	JNZ	E1_20
	
	MOV	BX,RELAISE_TIME1
	MOV	RELAISE_COUNTER1,BX
	DEC	ENV1
	
	RET
E1_10:
	MUL	ENV1
	MOV	BL,44
	DIV	BL
	
	CMP	ENV1,44
	JE	E1_20
	
	DEC	ATTACK_COUNTER1
	JNZ	E1_20
	
	MOV	BX,ATTACK_TIME1
	MOV	ATTACK_COUNTER1,BX
	INC	ENV1
E1_20:
	RET

ENVELOOP2:
	MOV	BL,STIMME2_ADSR
	AND	BL,00000001B
	JNZ	E1_10
	
	MUL	ENV2
	MOV	BL,44
	DIV	BL
	
	CMP	ENV2,0
	JE	E2_20
	
	DEC	RELAISE_COUNTER2
	JNZ	E2_20
	
	MOV	BX,RELAISE_TIME2
	MOV	RELAISE_COUNTER2,BX
	DEC	ENV2
	
	RET
E2_10:
	MUL	ENV2
	MOV	BL,44
	DIV	BL
	
	CMP	ENV2,44
	JE	E2_20
	
	DEC	ATTACK_COUNTER2
	JNZ	E2_20
	
	MOV	BX,ATTACK_TIME2
	MOV	ATTACK_COUNTER2,BX
	INC	ENV2
E2_20:
	RET
	
ENVELOOP3:
	MOV	BL,STIMME3_ADSR
	AND	BL,00000001B
	JNZ	E3_10
	
	MUL	ENV3
	MOV	BL,44
	DIV	BL
	
	CMP	ENV3,0
	JE	E3_20
	
	DEC	RELAISE_COUNTER3
	JNZ	E3_20
	
	MOV	BX,RELAISE_TIME3
	MOV	RELAISE_COUNTER3,BX
	DEC	ENV3
	
	RET
E3_10:
	MUL	ENV3
	MOV	BL,44
	DIV	BL
	
	CMP	ENV3,44
	JE	E3_20
	
	DEC	ATTACK_COUNTER3
	JNZ	E3_20
	
	MOV	BX,ATTACK_TIME3
	MOV	ATTACK_COUNTER3,BX
	INC	ENV3
E3_20:
	RET
	
;***************************************
END





