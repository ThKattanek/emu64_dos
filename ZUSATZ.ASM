;****************************************
;*					*
;* Titel: Screenshot (für Emu64)	*
;* Autor: Thorsten Kattanek		*
;* Datum: 25.10.1998			*
;* Ort  : Berlin			*
;* Vers : 1.0				*
;* Info : Speichert Aktuelles Bild	*
;*	  als PCX-File			*
;*	  In einer Sitzung können	*
;*	  100 Bilder gemacht werden	*
;****************************************

PUBLIC	PCX_OUT,FPS
EXTRN	FLAGS_1:WORD,CONFIG:BYTE


.MODEL SMALL
.DATA

;****************************************

	FILE_NAME	DB	"SCREEN"
	ASCII_BILDNR	DB	"00",".PCX",0
	FILE_HANDLE	DW	0
	PCX_HEADER	DB	10,5,1,8
			DW	1,1,320,200
			DW	72,72
			DB	48 DUP (0)
			DB	0,1
			DW	320,0
	FRAMES_ZÄHLER   DB	0
	ZEIT1		DW	0
	ZEIT2		DW	0
	COLOR		DB	16
	PUFFER		DB	"(C) Thorsten Kattanek´s EMU64 Screenshots V1.0",13 DUP (0)
	FARBEN_C64_PCX	DB 0,0,0,240,247,240,160,0,0,80,247,240,160,0,160,0,167,0,0,0,160,240,247,0,160,80,0,127,40,0,240,80,80,80,80,80
			DB 127,127,127,80,247,80,80,80,240,160,167,160

	FPS_ZEILE1	DB 7,7,7,0,7,7,7
	FPS_ZEILE2	DB 1,5,1,2,5,5,5
	FPS_ZEILE3	DB 7,7,7,0,5,5,5
	FPS_ZEILE4	DB 1,1,4,2,5,5,5
	FPS_ZEILE5	DB 1,1,7,0,7,7,7

	ZAHLEN_Z1	DB 7,6,7,7,1,7,7,7,7,7
	ZAHLEN_Z2	DB 5,4,4,4,5,1,1,4,5,5
	ZAHLEN_Z3	DB 5,4,7,6,7,7,7,6,7,7
	ZAHLEN_Z4	DB 5,4,1,4,4,4,5,4,5,4
	ZAHLEN_Z5	DB 7,4,7,7,4,7,7,4,7,7
	

;****************************************

.486
.CODE

;*********** Unterprogramm zum Erstellen eines Screenshots als PCX File ( Komprimiert mit 256 Farben ) **********

PCX_OUT:
	CMP	CONFIG[2],99
	JL	PCX_OUT_05
	MOV	CONFIG[2],0				
PCX_OUT_05:
	MOVZX	AX,CONFIG[2]		; Bildnummer in Ascii Code Umwandeln
	CMP	AX,9
	JG	PCX_OUT_10		; wenn größer 9 dann durch 10 Teilen
	
	MOV	ASCII_BILDNR[0],"0"
	ADD	AL,48
	MOV	ASCII_BILDNR[1],AL
	JMP	PCX_OUT_20

PCX_OUT_10:
	
	MOV	BH,10
	DIV	BH
	ADD	AL,48
	MOV	ASCII_BILDNR[0],AL
	ADD	AH,48
	MOV	ASCII_BILDNR[1],AH

PCX_OUT_20:				; Bilddatei erstellen oder Löschen
		
	MOV	AH,3CH
	XOR	CX,CX
	LEA	DX,FILE_NAME
	INT	21H
	MOV	FILE_HANDLE,AX

	MOV	AH,40H			; PCX-HEADER schreiben
	MOV	BX,FILE_HANDLE
	MOV	CX,80H
	LEA	DX,PCX_HEADER
	INT	21H

	MOV	DX,0A000H		; RLE-Kompriemierung
	MOV	ES,DX
	MOV	SI,0

PCX_OUT_25:

	MOV	CX,0

PCX_OUT_30:

	MOV	AL,ES:[SI]
	INC	SI
	CMP	SI,64000
	JE	PCX_OUT_50		; BITMAP IST ZU ENDE ( 1 einzelnes Byte Schreiben AL )
	INC	CX
	CMP	CX,320
	JE	PCX_OUT_55		; ZEILE IST ZU ENDE ( 1 einzelnes Byte Schreiben AL )

PCX_OUT_35:

	MOV	AH,ES:[SI]
	INC	SI
	CMP	SI,64000
	JE	PCX_OUT_60		; BITMAP IST ZU ENDE ( 2 Byte Schreiben AL,AH)
	INC	CX
	CMP	CX,320
	JE	PCX_OUT_65		; ZEILE IST ZU ENDE ( 2 Byte Schreiben AL,AH)
	
	CMP	AL,AH				
	JNE	PCX_OUT_70		; AL Schreiben AH nach AL und zum zweiten Byte lesen

	MOV	BL,194

PCX_OUT_40:

	MOV	AH,ES:[SI]
	CMP	AL,AH
	JNE	PCX_OUT_80		; BL SCHREIBEN UND AL SCHREIBEN

	INC	SI
	CMP	SI,64000
	JE	PCX_OUT_90		; BITMAP IST ZU ENDE 
	INC	CX
	CMP	CX,320
	JE 	PCX_OUT_85		; ZEILE IST ZU ENDE
	INC	BL
	CMP	BL,0FFH
	JE	PCX_OUT_85		; MAX WIEDERHOLUNGEN ERREICHT ( 0FFH SCHREIBEN UND AL)
	JMP	PCX_OUT_40

PCX_OUT_50:

	MOV	PUFFER,AL
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	MOV	AH,40H
	MOV	BX,FILE_HANDLE
	MOV	CX,1
	LEA	DX,PUFFER
	INT	21H
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	JMP	PCX_OUT_90

PCX_OUT_55:

	MOV	PUFFER,AL
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	MOV	AH,40H
	MOV	BX,FILE_HANDLE
	MOV	CX,1
	LEA	DX,PUFFER
	INT	21H
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	JMP	PCX_OUT_25

PCX_OUT_60:
	
	MOV	PUFFER,AL
	MOV	PUFFER[1],AH
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	MOV	AH,40H
	MOV	BX,FILE_HANDLE
	MOV	CX,2
	LEA	DX,PUFFER
	INT	21H
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	JMP	PCX_OUT_90

PCX_OUT_65:

	MOV	PUFFER,AL
	MOV	PUFFER[1],AH
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	MOV	AH,40H
	MOV	BX,FILE_HANDLE
	MOV	CX,2
	LEA	DX,PUFFER
	INT	21H
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	JMP	PCX_OUT_25

PCX_OUT_70:
	
	MOV	PUFFER,AL
	MOV	AL,AH
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	MOV	AH,40H
	MOV	BX,FILE_HANDLE
	MOV	CX,1
	LEA	DX,PUFFER
	INT	21H
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	JMP	PCX_OUT_35

PCX_OUT_80:
	
	MOV	PUFFER,BL
	MOV	PUFFER[1],AL
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	MOV	AH,40H
	MOV	BX,FILE_HANDLE
	MOV	CX,2
	LEA	DX,PUFFER
	INT	21H
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	JMP	PCX_OUT_30

PCX_OUT_85:
	
	MOV	PUFFER,BL
	MOV	PUFFER[1],AL
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	MOV	AH,40H
	MOV	BX,FILE_HANDLE
	MOV	CX,2
	LEA	DX,PUFFER
	INT	21H
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	JMP	PCX_OUT_30
	
PCX_OUT_90:	

	MOV	PUFFER,0CH
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	MOV	AH,40H
	MOV	BX,FILE_HANDLE
	MOV	CX,1
	LEA	DX,PUFFER
	INT	21H
	POP	DX
	POP	CX
	POP	BX
	POP	AX

	MOV	AH,40H
	MOV	BX,FILE_HANDLE
	MOV	CX,768
	LEA	DX,FARBEN_C64_PCX
	INT	21H

	MOV	BX,FILE_HANDLE		; Bilddatei schließen
	MOV	AH,3EH	
	INT	21H

	INC	CONFIG[2]

PCX_OUT_ENDE:	

	RET

;********** Unterprogramm zum Anzeigen und Berechnen der Frames pro Sekunde **********

FPS:
	INC	COLOR
	CMP	COLOR,48
	JNE	FPS_1
	MOV	COLOR,16
FPS_1:
	MOV	CH,COLOR
	MOV	DX,0A000H
	MOV	ES,DX

	MOV	DI,195*320+290		; FPS_Zeile 1 ins VRAM Schreiben
	MOV	SI,0
FPS_10:
	MOV	AH,FPS_ZEILE1[SI]
	MOV	BH,3
FPS_11:
	SHR	AH,1
	JNB	FPS_12				
	MOV	ES:[DI],CH
	INC	DI
	DEC	BH
	JNS	FPS_11
	JMP	FPS_13	
FPS_12:
	INC	DI			
	DEC	BH
	JNS	FPS_11
FPS_13:
	INC	SI
	CMP	SI,7
	JNE	FPS_10



	MOV	DI,196*320+290		; FPS_Zeile 2 ins VRAM Schreiben
	MOV	SI,0
FPS_20:
	MOV	AH,FPS_ZEILE2[SI]
	MOV	BH,3
FPS_21:
	SHR	AH,1
	JNB	FPS_22				
	MOV	ES:[DI],CH
	INC	DI
	DEC	BH
	JNS	FPS_21
	JMP	FPS_23	
FPS_22:
	INC	DI			
	DEC	BH
	JNS	FPS_21
FPS_23:
	INC	SI
	CMP	SI,7
	JNE	FPS_20


	MOV	DI,197*320+290		; FPS_Zeile 3 ins VRAM Schreiben
	MOV	SI,0
FPS_30:
	MOV	AH,FPS_ZEILE3[SI]
	MOV	BH,3
FPS_31:
	SHR	AH,1
	JNB	FPS_32				
	MOV	ES:[DI],CH
	INC	DI
	DEC	BH
	JNS	FPS_31
	JMP	FPS_33	
FPS_32:
	INC	DI			
	DEC	BH
	JNS	FPS_31
FPS_33:
	INC	SI
	CMP	SI,7
	JNE	FPS_30	

	MOV	DI,198*320+290		; FPS_Zeile 4 ins VRAM Schreiben
	MOV	SI,0
FPS_40:
	MOV	AH,FPS_ZEILE4[SI]
	MOV	BH,3
FPS_41:
	SHR	AH,1
	JNB	FPS_42				
	MOV	ES:[DI],CH
	INC	DI
	DEC	BH
	JNS	FPS_41
	JMP	FPS_43	
FPS_42:
	INC	DI			
	DEC	BH
	JNS	FPS_41
FPS_43:
	INC	SI
	CMP	SI,7
	JNE	FPS_40

	MOV	DI,199*320+290		; FPS_Zeile 5 ins VRAM Schreiben
	MOV	SI,0
FPS_50:
	MOV	AH,FPS_ZEILE5[SI]
	MOV	BH,3
FPS_51:
	SHR	AH,1
	JNB	FPS_52				
	MOV	ES:[DI],CH
	INC	DI
	DEC	BH
	JNS	FPS_51
	JMP	FPS_53	
FPS_52:
	INC	DI			
	DEC	BH
	JNS	FPS_51
FPS_53:
	INC	SI
	CMP	SI,7
	JNE	FPS_50




	BT	FLAGS_1,4
	JAE	FPS_60			; Wenn Bit 0 dann Uhzeit lesen und Frame Zähler setzen

	DEC	FRAMES_ZÄHLER		; Wenn Bit 1 dann Frame Zähler erhöen und wenn 50 dann Uhrzeit wieder lesen
	JZ	FPS_80
	JMP	FPS_70
FPS_60:
	MOV	AH,00H
	INT	1AH
	MOV	ZEIT1,DX
	MOV	FRAMES_ZÄHLER,49
	OR	FLAGS_1,16
FPS_70:
	RET
FPS_80:
	MOV	AH,00H
	INT	1AH
	SUB	DX,ZEIT1		; FPS Ermitteln

	MOV	AX,910	
	DIV	DL	
	
	XOR	AH,AH
	MOV	DL,100
	DIV	DL
	
	MOV	CH,AH
	XOR	AH,AH
	MOV	SI,AX
	MOV	AL,CH
	MOV	DI,4
	CALL	FPS_100

	MOV	DL,10
	DIV	DL

	MOV	CH,AH
	XOR	AH,AH
	MOV	SI,AX
	MOV	AL,CH
	MOV	DI,5
	CALL	FPS_100

	MOV	SI,AX
	MOV	DI,6
	CALL	FPS_100
	
	AND	FLAGS_1,1111111111101111B
	RET
FPS_100:
	MOV	CL,ZAHLEN_Z1[SI]
	MOV	FPS_ZEILE1[DI],CL
	MOV	CL,ZAHLEN_Z2[SI]
	MOV	FPS_ZEILE2[DI],CL
	MOV	CL,ZAHLEN_Z3[SI]
	MOV	FPS_ZEILE3[DI],CL
	MOV	CL,ZAHLEN_Z4[SI]
	MOV	FPS_ZEILE4[DI],CL
	MOV	CL,ZAHLEN_Z5[SI]
	MOV	FPS_ZEILE5[DI],CL
	RET


END